{"mappings":"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","sources":["src/components/common/HomeButton.vue","src/App.vue","src/components/navigation/SiteNavigation.vue","src/components/entry/EntrySearch.vue","src/components/footer/SiteFooter.vue","src/scss/common/main.scss","src/scss/common/base/_fonts.scss","src/scss/common/gui/_icons-bootstrap.scss","src/scss/common/utils/_breakpoints.scss","src/scss/common/utils/_reset.scss","src/scss/common/base/_base.scss","src/scss/common/variables/_colors.scss","src/scss/common/variables/_layout.scss","src/scss/common/gui/_buttons.scss","src/scss/common/gui/_links.scss","src/scss/common/gui/_loaders.scss","src/scss/common/gui/_forms.scss","src/scss/common/utils/_color-classes.scss","src/scss/common/vue/_transitions.scss","src/views/LoginView.vue","src/views/NotFoundView.vue","src/views/AdminView.vue","src/components/entry/EntryListAdmin.vue","src/components/entry/EntryList.vue","src/components/common/HeroSection.vue","src/views/EntryView.vue"],"sourcesContent":["<template>\r\n    <RouterLink :to=\"{ name: 'Index' }\" class=\"btn-home link-primary\"\r\n        ><i class=\"bi bi-caret-left-fill\"></i>Home</RouterLink\r\n    >\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { RouterLink } from 'vue-router';\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n    .btn-home {\r\n        display: block;\r\n        font-weight: 700;\r\n        width: max-content;\r\n    }\r\n</style>\r\n","<template>\n    <div class=\"app-inner\">\n        <header>\n            <SiteNavigation />\n        </header>\n        <main class=\"view container-responsive\">\n            <RouterView />\n        </main>\n        <SiteFooter />\n    </div>\n</template>\n\n<script setup lang=\"ts\">\n    import { RouterView } from 'vue-router';\n    import SiteFooter from './components/footer/SiteFooter.vue';\n    import SiteNavigation from './components/navigation/SiteNavigation.vue';\n</script>\n\n<style scoped lang=\"scss\">\n    @use './scss/common/variables/layout';\n    @use './scss/common/variables/colors';\n    @use './scss/common//utils/breakpoints';\n    .app-inner {\n        @include breakpoints.from-md() {\n            padding-bottom: layout.$default-spacing;\n        }\n\n        .view {\n            min-height: 100vh;\n            padding: layout.$navigation-height layout.$default-spacing 0 layout.$default-spacing;\n            background-color: colors.$white;\n\n            @include breakpoints.from-md() {\n                padding-bottom: layout.$default-spacing;\n            }\n        }\n    }\n</style>\n","<template>\r\n    <div class=\"navigation-wrapper\">\r\n        <nav class=\"navigation container-responsive\">\r\n            <RouterLink :to=\"{ name: 'Index' }\" class=\"logo link-light\">\r\n                <LogoSvg :height=\"40\" class=\"logo-svg\" />\r\n                <span class=\"text\"><span>Aqua</span><span>Blog</span></span>\r\n            </RouterLink>\r\n            <EntrySearch />\r\n        </nav>\r\n    </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { RouterLink } from 'vue-router';\r\n    import LogoSvg from '../common/LogoSvg.vue';\r\n    import EntrySearch from '../entry/EntrySearch.vue';\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n    @use '../../scss/common/variables/layout';\r\n    @use '../../scss/common/variables/colors';\r\n\r\n    .navigation-wrapper {\r\n        position: fixed;\r\n        width: 100%;\r\n        overflow-y: visible;\r\n        z-index: 100;\r\n    }\r\n\r\n    .navigation {\r\n        position: relative;\r\n        display: flex;\r\n        width: 100%;\r\n        padding: 1rem layout.$default-spacing;\r\n        color: colors.$light;\r\n        background: colors.$primary;\r\n\r\n        .logo {\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 0.7rem;\r\n            .text {\r\n                display: flex;\r\n                flex-direction: column;\r\n                font-weight: 700;\r\n                line-height: 1;\r\n                transform: translateY(-0.2rem);\r\n            }\r\n\r\n            &:deep(.logo-svg) {\r\n                .fill-color {\r\n                    fill: colors.$light;\r\n                }\r\n            }\r\n\r\n            &:hover {\r\n                &:deep(.logo-svg) {\r\n                    .fill-color {\r\n                        fill: colors.$secondary-light;\r\n                    }\r\n                }\r\n            }\r\n\r\n            &:active {\r\n                &:deep(.logo-svg) {\r\n                    .fill-color {\r\n                        fill: colors.$secondary;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div ref=\"componentRoot\" class=\"entry-search\">\r\n        <div class=\"input-field\">\r\n            <input\r\n                ref=\"input\"\r\n                :value=\"searchQuery\"\r\n                @input=\"(e) => onInput(e)\"\r\n                class=\"input\"\r\n                type=\"text\"\r\n                name=\"search\"\r\n                id=\"search\"\r\n                autocomplete=\"off\"\r\n                :class=\"{ show: isInputOpen }\"\r\n            />\r\n            <i\r\n                class=\"bi icon link link-light\"\r\n                :class=\"{ 'bi-search': !isInputOpen, 'bi-x-circle': isInputOpen }\"\r\n                @click=\"toggleInput\"\r\n            >\r\n            </i>\r\n        </div>\r\n        <div v-if=\"searchResult.length > 0\" class=\"result\">\r\n            <RouterLink\r\n                v-for=\"entry in searchResult\"\r\n                :key=\"entry.id\"\r\n                :to=\"{ name: 'Entry', params: { id: entry.id } }\"\r\n                @click=\"resetInput\"\r\n                class=\"result-item link link-light link-hover-underline\"\r\n                v-html=\"entry.title\"\r\n                :class=\"{ disabled: entry.id === NO_RESULT_ID }\"\r\n            >\r\n            </RouterLink>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { ref } from 'vue';\r\n    import { RouterLink } from 'vue-router';\r\n    import { onClickOutside, useEventListener } from '@vueuse/core';\r\n    import { apiStore, type BlogEntry } from '../../stores/ApiStore';\r\n\r\n    interface ResultItem {\r\n        id: string;\r\n        title: string;\r\n    }\r\n\r\n    const componentRoot = ref<HTMLElement | null>(null);\r\n    const input = ref<HTMLInputElement | null>(null);\r\n    const isInputOpen = ref<boolean>(false);\r\n    const searchQuery = ref<string>('');\r\n    const searchResult = ref<ResultItem[]>([]);\r\n    const NO_RESULT_ID = ref<string>('no-result');\r\n    const noResult = <ResultItem>{\r\n        id: NO_RESULT_ID.value,\r\n        title: '<span class=\"searching\">Searching</span>',\r\n    };\r\n    let isLoading = false;\r\n\r\n    onClickOutside(componentRoot, resetInput);\r\n    useEventListener(window, 'resize', () => {\r\n        if (window.innerWidth >= 768) {\r\n            resetInput();\r\n        }\r\n    });\r\n\r\n    /**\r\n     *\r\n     */\r\n    function onInput(e: Event): void {\r\n        const el = e.target as HTMLInputElement;\r\n        searchQuery.value = el.value;\r\n\r\n        if (apiStore.items.length === 0 && !isLoading) {\r\n            isLoading = true;\r\n            apiStore\r\n                .get()\r\n                .then(() => (isLoading = false))\r\n                .catch((error) => {\r\n                    console.log(error);\r\n                    isLoading = false;\r\n                });\r\n            return;\r\n        }\r\n\r\n        if (searchQuery.value === undefined || searchQuery.value.length < 2) {\r\n            searchResult.value = [];\r\n            return;\r\n        }\r\n\r\n        const regexp = new RegExp(searchQuery.value, 'gi');\r\n        searchResult.value = apiStore.items\r\n            .filter((entry: BlogEntry) => entry.title.match(regexp))\r\n            .map((entry: BlogEntry) => {\r\n                return {\r\n                    id: entry._id,\r\n                    title: entry.title.replaceAll(regexp, '<span class=\"search-term\">$&</span>'),\r\n                };\r\n            });\r\n\r\n        if (searchResult.value.length === 0) searchResult.value = [noResult];\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    function toggleInput(): void {\r\n        isInputOpen.value = !isInputOpen.value;\r\n        if (isInputOpen.value) {\r\n            setTimeout(() => {\r\n                input.value?.focus();\r\n            }, 300);\r\n        } else {\r\n            resetInput();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    function resetInput(): void {\r\n        if (isInputOpen.value) {\r\n            toggleInput();\r\n            return;\r\n        }\r\n        searchQuery.value = '';\r\n        searchResult.value = [];\r\n    }\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n    @use '../../scss/common/variables/layout';\r\n    @use '../../scss/common/variables/colors';\r\n    @use '../../scss/common/utils/breakpoints';\r\n    @use '../../scss/common/gui/loaders';\r\n    .entry-search {\r\n        position: absolute;\r\n        top: 0.8rem;\r\n        right: 0;\r\n        padding: 0 layout.$default-spacing;\r\n        pointer-events: none;\r\n\r\n        width: 100%;\r\n        @include breakpoints.from-md() {\r\n            width: 350px;\r\n        }\r\n\r\n        .input-field {\r\n            position: relative;\r\n            display: flex;\r\n            justify-content: flex-end;\r\n            align-items: center;\r\n            gap: 0.8rem;\r\n            width: 100%;\r\n\r\n            .icon {\r\n                font-size: 2rem;\r\n                pointer-events: all;\r\n\r\n                @include breakpoints.from-md() {\r\n                    pointer-events: none;\r\n                }\r\n            }\r\n\r\n            .input {\r\n                font-size: inherit;\r\n                padding: 0.7rem 1rem;\r\n                color: colors.$dark;\r\n                background-color: colors.$light;\r\n                border-radius: 10px;\r\n                pointer-events: all;\r\n\r\n                visibility: hidden;\r\n                width: 0px;\r\n                transition: width 150ms ease;\r\n\r\n                @include breakpoints.from-md() {\r\n                    width: 100%;\r\n                    visibility: visible;\r\n                }\r\n\r\n                &.show {\r\n                    width: 100%;\r\n                    visibility: visible;\r\n                }\r\n            }\r\n        }\r\n\r\n        .result {\r\n            position: relative;\r\n            background-color: colors.$primary;\r\n            border-radius: 10px;\r\n            margin-top: 1.6rem;\r\n            padding: 0 1rem;\r\n\r\n            max-height: 500px;\r\n            overflow-y: auto;\r\n\r\n            pointer-events: all;\r\n\r\n            .result-item {\r\n                display: block;\r\n                padding: 1rem 0.5rem;\r\n                border-bottom: 1px dotted colors.$light;\r\n\r\n                &:deep(.search-term) {\r\n                    background-color: rgba(colors.$light, 0.25);\r\n                    color: colors.$white;\r\n                    font-weight: 700;\r\n                }\r\n\r\n                &:last-of-type {\r\n                    border-bottom: none;\r\n                }\r\n\r\n                &.disabled {\r\n                    pointer-events: none;\r\n                }\r\n\r\n                &:deep(.searching) {\r\n                    @include loaders.loader__dots(colors.$light);\r\n                }\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"footer-wrapper\">\r\n        <footer class=\"footer container-responsive\">\r\n            <span class=\"legal\">&copy;2022. Aqua Blog Inc.</span>\r\n            <RouterLink to=\"/admin\" class=\"admin link-light link-hover-underline\"\r\n                >Admin <i class=\"bi bi-person-lock\"></i\r\n            ></RouterLink>\r\n        </footer>\r\n    </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { RouterLink } from 'vue-router';\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n    @use '../../scss/common/variables/layout';\r\n    @use '../../scss/common/variables/colors';\r\n    .footer {\r\n        display: flex;\r\n        align-items: center;\r\n        padding: 1rem layout.$default-spacing;\r\n        color: colors.$light;\r\n        background: colors.$primary;\r\n        .legal {\r\n            font-size: small;\r\n        }\r\n        .admin {\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 0.4rem;\r\n            margin-left: auto;\r\n            .bi {\r\n                font-size: 1.5rem;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","@use 'base';\n@use 'gui';\n@use 'utils';\n@use 'variables';\n@use 'vue';\n",null,null,null,null,null,null,null,null,null,null,null,null,null,"<script setup lang=\"ts\">\r\n    import type { UserCredential } from '@firebase/auth';\r\n    import { useUserStore } from '../stores/UserStore';\r\n    import { ref } from 'vue';\r\n    import { useRouter } from 'vue-router';\r\n\r\n    const router = useRouter();\r\n    const user = useUserStore();\r\n    const email = ref<string>('');\r\n    const password = ref<string>('');\r\n\r\n    function login() {\r\n        user.login(email.value, password.value).then((res: UserCredential | void) => {\r\n            if (res) router.push({ name: 'Admin' });\r\n        });\r\n    }\r\n</script>\r\n\r\n<template>\r\n    <div class=\"login-view page-grid view-padding\">\r\n        <aside class=\"aside\"></aside>\r\n        <div class=\"login-form\">\r\n            <h1 class=\"header\">Log In</h1>\r\n            <form class=\"form\" @submit.prevent=\"login\">\r\n                <div class=\"form-control\">\r\n                    <label class=\"label\" for=\"email\">Email</label>\r\n                    <input\r\n                        v-model=\"email\"\r\n                        class=\"input-text\"\r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        id=\"email\"\r\n                        required\r\n                    />\r\n                </div>\r\n                <div class=\"form-control\">\r\n                    <label class=\"label\" for=\"password\">Password</label>\r\n                    <input\r\n                        v-model=\"password\"\r\n                        class=\"input-text\"\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        id=\"password\"\r\n                        required\r\n                    />\r\n                </div>\r\n                <div class=\"submit\">\r\n                    <p class=\"error-msg\" v-if=\"user.errorMsg\">{{ user.errorMsg }}</p>\r\n                    <input type=\"submit\" class=\"btn-primary btn-submit\" value=\"Submit\" />\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n    @use '../scss/common/variables/colors';\r\n    @use '../scss/common/utils/breakpoints';\r\n    .login-view {\r\n        .header {\r\n            color: colors.$primary;\r\n        }\r\n        .login-form {\r\n            max-width: 500px;\r\n\r\n            .submit {\r\n                display: flex;\r\n                justify-content: center;\r\n\r\n                .error-msg {\r\n                    padding-right: 1rem;\r\n                }\r\n                .btn-submit {\r\n                    margin-left: auto;\r\n                    align-self: flex-start;\r\n                }\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"page-grid not-found-view\">\r\n        <aside>\r\n            <HomeButton />\r\n        </aside>\r\n        <section class=\"message\">\r\n            <h1 class=\"header\">404</h1>\r\n            <p>Page not found</p>\r\n        </section>\r\n    </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import HomeButton from '../components/common/HomeButton.vue';\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n    @use '../scss/common/variables/layout';\r\n    .not-found-view {\r\n        padding-top: layout.$default-spacing;\r\n        .message {\r\n            padding-top: 4rem;\r\n\r\n            .header {\r\n                font-size: 3rem;\r\n                margin-bottom: 0.5rem;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"admin-view view-padding\">\r\n        <header class=\"admin-header page-grid\">\r\n            <div><HomeButton /></div>\r\n            <div class=\"wrapper\">\r\n                <h1 class=\"page-title\">Admin</h1>\r\n                <p class=\"error-msg\">{{ user.errorMsg }}</p>\r\n                <button @click=\"logout\" class=\"btn-primary btn-logout\">Log Out</button>\r\n            </div>\r\n        </header>\r\n        <div class=\"page-grid\">\r\n            <aside class=\"aside\">\r\n                <button\r\n                    @click=\"transitionKey++, displayCreate()\"\r\n                    class=\"btn-primary btn-create\"\r\n                    :disabled=\"mode === 'create'\"\r\n                >\r\n                    <span>Create Entry</span> <i class=\"bi bi-plus-circle\"></i>\r\n                </button>\r\n                <EntryListAdmin\r\n                    :entry-list=\"entryList\"\r\n                    :current-entry=\"currentEntry\"\r\n                    @item-selected=\"onListItemSelected\"\r\n                />\r\n            </aside>\r\n\r\n            <Transition name=\"fade\" mode=\"out-in\">\r\n                <div class=\"entry-edit\" :key=\"transitionKey\">\r\n                    <h2 class=\"edit-header\" v-if=\"mode === 'create'\">Create Entry</h2>\r\n                    <h2 class=\"edit-header\" v-else>Edit Entry</h2>\r\n\r\n                    <form class=\"form\" @submit.prevent=\"saveEntry\">\r\n                        <div class=\"form-control\">\r\n                            <label class=\"label\" for=\"published\">Publish date</label>\r\n                            <input\r\n                                v-model=\"published\"\r\n                                class=\"input-text input-published\"\r\n                                type=\"date\"\r\n                                name=\"published\"\r\n                                id=\"published\"\r\n                                :max=\"today\"\r\n                                required\r\n                            />\r\n                        </div>\r\n                        <div class=\"form-control\">\r\n                            <label class=\"label\" for=\"author\">Author</label>\r\n                            <input\r\n                                v-model=\"author\"\r\n                                class=\"input-text\"\r\n                                type=\"text\"\r\n                                name=\"author\"\r\n                                id=\"author\"\r\n                                required\r\n                            />\r\n                        </div>\r\n                        <div class=\"form-control\">\r\n                            <label class=\"label\" for=\"title\">Title</label>\r\n                            <input\r\n                                v-model=\"title\"\r\n                                class=\"input-text input-title\"\r\n                                type=\"text\"\r\n                                name=\"title\"\r\n                                id=\"title\"\r\n                                required\r\n                            />\r\n                        </div>\r\n                        <div class=\"form-control\">\r\n                            <label class=\"label\" for=\"body\">Body</label>\r\n                            <textarea\r\n                                v-model=\"body\"\r\n                                class=\"input-text input-body\"\r\n                                name=\"body\"\r\n                                id=\"body\"\r\n                                required\r\n                            >\r\n                            </textarea>\r\n                        </div>\r\n                        <img v-if=\"validImgSrc\" :src=\"validImgSrc\" class=\"entry-image\" />\r\n                        <div class=\"form-control\">\r\n                            <label class=\"label\" for=\"image\">image Url</label>\r\n                            <input\r\n                                v-model=\"imgSrc\"\r\n                                class=\"input-text\"\r\n                                type=\"text\"\r\n                                name=\"image\"\r\n                                id=\"image\"\r\n                                placeholder=\"http...\"\r\n                            />\r\n                        </div>\r\n\r\n                        <div class=\"form-btns\">\r\n                            <input\r\n                                type=\"submit\"\r\n                                class=\"btn-primary btn-form\"\r\n                                value=\"Save\"\r\n                                :disabled=\"!entryChanged\"\r\n                            />\r\n                            <button\r\n                                v-if=\"mode === 'edit'\"\r\n                                @click.prevent=\"deleteEntry\"\r\n                                class=\"btn-primary btn-form\"\r\n                            >\r\n                                Delete\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </Transition>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { ref, computed, watch } from 'vue';\r\n    import { sanitize } from 'dompurify';\r\n    import { apiStore, type BlogEntry, type BlogEntryUpdate } from '../stores/ApiStore';\r\n    import HomeButton from '../components/common/HomeButton.vue';\r\n    import EntryListAdmin from '../components/entry/EntryListAdmin.vue';\r\n    import { useUserStore } from '../stores/UserStore';\r\n    import { useRouter } from 'vue-router';\r\n\r\n    type Mode = 'edit' | 'create';\r\n\r\n    const entryList = ref<BlogEntry[]>([]);\r\n    const title = ref<string>('');\r\n    const author = ref<string>('');\r\n    const published = ref<string>('');\r\n    const body = ref<string>('');\r\n    const imgSrc = ref<string>('');\r\n    const mode = ref<Mode>('edit');\r\n    const currentEntry = ref<BlogEntry>();\r\n    const entryChanged = ref<boolean>(false);\r\n    const transitionKey = ref<number>(0);\r\n    const user = useUserStore();\r\n    const router = useRouter();\r\n    let watchCounter = 0;\r\n\r\n    const today = computed<string>(() => {\r\n        const isoDate = new Date().toISOString();\r\n        return isoDate.substring(0, isoDate.indexOf('T'));\r\n    });\r\n\r\n    const validImgSrc = computed<string>(() =>\r\n        imgSrc.value.match(/^https?:\\/\\/.+\\/.+$/) ? imgSrc.value : ''\r\n    );\r\n\r\n    watch([published, title, author, body, imgSrc], () => {\r\n        if (watchCounter >= 1) {\r\n            entryChanged.value = true;\r\n        }\r\n        watchCounter++;\r\n    });\r\n\r\n    refreshData();\r\n\r\n    /**\r\n     *\r\n     */\r\n    function displayCreate(): void {\r\n        resetWatch();\r\n        mode.value = 'create';\r\n        currentEntry.value = undefined;\r\n        resetForm();\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    function displayEdit(entry: BlogEntry): void {\r\n        window.scrollTo(0, 0);\r\n        resetWatch();\r\n        mode.value = 'edit';\r\n        currentEntry.value = entry;\r\n        populateForm(entry);\r\n    }\r\n\r\n    function onListItemSelected(entry: BlogEntry) {\r\n        transitionKey.value++;\r\n        displayEdit(entry);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    function populateForm(entry: BlogEntry): void {\r\n        title.value = entry.title;\r\n        author.value = entry.author;\r\n        published.value = entry.published;\r\n        body.value = entry.body;\r\n        imgSrc.value = entry.img_src || '';\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    function resetForm(): void {\r\n        title.value = '';\r\n        author.value = 'Admin';\r\n        published.value = today.value;\r\n        body.value = '';\r\n        imgSrc.value = '';\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    function resetWatch(): void {\r\n        entryChanged.value = false;\r\n        watchCounter = 0;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    function saveEntry(): void {\r\n        const props = <BlogEntryUpdate>{\r\n            title: sanitize(title.value),\r\n            author: sanitize(author.value),\r\n            published: sanitize(published.value),\r\n            body: sanitize(body.value),\r\n            img_src: sanitize(validImgSrc.value),\r\n        };\r\n\r\n        try {\r\n            if (mode.value === 'create') {\r\n                apiStore.post(props).then(entryModified);\r\n            } else if (mode.value === 'edit') {\r\n                if (currentEntry.value)\r\n                    apiStore.patch(props, currentEntry.value._id).then(entryModified);\r\n            }\r\n        } catch (error: any) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    function deleteEntry(): void {\r\n        try {\r\n            if (currentEntry.value) apiStore.del(currentEntry.value._id).then(entryModified);\r\n        } catch (error: any) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    function entryModified(entry?: BlogEntry): void {\r\n        transitionKey.value++;\r\n        refreshData(entry);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    function refreshData(entry?: BlogEntry): void {\r\n        apiStore\r\n            .get()\r\n            .then((entries: BlogEntry[] | BlogEntry) => {\r\n                entries = entries as BlogEntry[];\r\n                entryList.value = entries;\r\n                const index = entry ? entries.findIndex((e: BlogEntry) => e._id === entry._id) : 0;\r\n                displayEdit(entries[Math.max(index, 0)]);\r\n            })\r\n            .catch((error: any) => console.log(error));\r\n    }\r\n    /**\r\n     *\r\n     */\r\n    function logout(): void {\r\n        user.logout().then(() => {\r\n            router.push({ name: 'Index' });\r\n        });\r\n    }\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n    @use '../scss/common/variables/colors';\r\n    @use '../scss/common/variables/layout';\r\n    @use '../scss/common/utils/breakpoints';\r\n    .admin-view {\r\n        padding-bottom: layout.$view-padding-bottom;\r\n        .aside {\r\n            padding-right: layout.$default-spacing;\r\n\r\n            .btn-home {\r\n                margin-bottom: 4.2rem;\r\n            }\r\n            .btn-create {\r\n                display: flex;\r\n                gap: 0.7rem;\r\n                font-size: 1.3rem;\r\n\r\n                @include breakpoints.from-lg() {\r\n                    font-size: 1rem;\r\n                }\r\n            }\r\n        }\r\n\r\n        .admin-header {\r\n            margin-bottom: 2rem;\r\n            @include breakpoints.from-lg() {\r\n                margin-bottom: 1rem;\r\n            }\r\n\r\n            .wrapper {\r\n                display: flex;\r\n                align-items: center;\r\n                margin-top: 2rem;\r\n\r\n                @include breakpoints.from-lg() {\r\n                    margin-top: 0;\r\n                }\r\n\r\n                .page-title {\r\n                    margin: 0;\r\n                }\r\n\r\n                .error-msg {\r\n                    flex: 1;\r\n                    margin: 0;\r\n                    padding-right: 1rem;\r\n                    text-align: right;\r\n                }\r\n                .btn-logout {\r\n                    align-self: flex-end;\r\n                }\r\n            }\r\n        }\r\n\r\n        .entry-edit {\r\n            .edit-header {\r\n                margin-bottom: 0.7rem;\r\n                color: colors.$primary;\r\n\r\n                @include breakpoints.from-lg() {\r\n                    margin-bottom: 1.4rem;\r\n                }\r\n            }\r\n            .form {\r\n                margin-bottom: 2rem;\r\n                .form-control {\r\n                    .input-title {\r\n                        font-weight: 700;\r\n                    }\r\n\r\n                    .input-body {\r\n                        height: 35vh;\r\n                        resize: none;\r\n                        font-size: inherit;\r\n                        border: none;\r\n                    }\r\n\r\n                    .input-published {\r\n                        width: auto;\r\n                    }\r\n                }\r\n\r\n                .entry-image {\r\n                    display: block;\r\n                    margin-top: 0.5rem;\r\n                    max-width: 100%;\r\n                    object-fit: cover;\r\n                    aspect-ratio: 16 / 9;\r\n                }\r\n\r\n                .form-btns {\r\n                    display: flex;\r\n                    gap: 1rem;\r\n                    margin-top: 1rem;\r\n                    .btn-form {\r\n                        font-size: 1.3rem;\r\n                        @include breakpoints.from-lg() {\r\n                            font-size: 1rem;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <select class=\"entry-select input-text\" v-model=\"selectedEntry\">\r\n        <option disabled value=\"default\">Edit entry...</option>\r\n        <option v-for=\"entry in entryList\" :value=\"entry\">\r\n            {{ entry.published + ' ' + entry.title }}\r\n        </option>\r\n    </select>\r\n\r\n    <ul class=\"entry-list\">\r\n        <li\r\n            v-for=\"entry in entryList\"\r\n            :key=\"entry._id\"\r\n            :entry=\"entry\"\r\n            @click=\"selectedEntry = entry\"\r\n            :class=\"{ 'is-selected': entry === selectedEntry }\"\r\n            class=\"list-item link link-hover-to-secondary\"\r\n        >\r\n            <a>\r\n                <span class=\"published\">{{ entry.published }}</span>\r\n                <span class=\"title\">{{ entry.title }}</span>\r\n            </a>\r\n        </li>\r\n    </ul>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { computed } from 'vue';\r\n    import type { BlogEntry } from '../../stores/ApiStore';\r\n\r\n    const props = defineProps<{ entryList: BlogEntry[]; currentEntry: BlogEntry | undefined }>();\r\n    const emit = defineEmits<{\r\n        (e: 'item-selected', entry: BlogEntry): void;\r\n    }>();\r\n\r\n    const selectedEntry = computed({\r\n        get: () => (props.currentEntry ? props.currentEntry : 'default'),\r\n        set: (entry) => emit('item-selected', entry as BlogEntry),\r\n    });\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n    @use '../../scss/common/variables/colors';\r\n    @use '../../scss/common/utils/breakpoints';\r\n\r\n    .entry-select {\r\n        width: 100%;\r\n        font-size: inherit;\r\n        font-family: inherit;\r\n        padding: 0.5rem;\r\n        margin-top: 1rem;\r\n        margin-bottom: 2rem;\r\n\r\n        @include breakpoints.from-lg() {\r\n            display: none;\r\n        }\r\n    }\r\n\r\n    .entry-list {\r\n        list-style: none;\r\n        padding: 0;\r\n        margin-top: 2rem;\r\n\r\n        @include breakpoints.to-lg() {\r\n            display: none;\r\n        }\r\n        .list-item {\r\n            margin-bottom: 0.2rem;\r\n            padding-bottom: 0.5rem;\r\n            border-bottom: 1px dotted colors.$primary;\r\n\r\n            &:hover {\r\n                .published {\r\n                    color: colors.$secondary;\r\n                }\r\n            }\r\n\r\n            .published {\r\n                font-size: 0.8rem;\r\n                color: colors.$secondary-dark;\r\n            }\r\n\r\n            .title {\r\n                display: block;\r\n                font-weight: 700;\r\n                width: 100%;\r\n                white-space: nowrap;\r\n                overflow: hidden;\r\n                text-overflow: ellipsis;\r\n            }\r\n\r\n            &.is-selected {\r\n                color: colors.$primary-light;\r\n                .published {\r\n                    color: colors.$primary-light;\r\n                }\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <ul class=\"entry-list\">\r\n        <li\r\n            v-for=\"entry in entryList\"\r\n            :key=\"entry._id\"\r\n            :entry=\"entry\"\r\n            class=\"entry-list-item link-hover-to-secondary\"\r\n        >\r\n            <RouterLink :to=\"{ name: 'Entry', params: { id: entry._id } }\">\r\n                <h3 class=\"header\">{{ entry.title }}</h3>\r\n                <span class=\"details\"\r\n                    >{{ entry.published }}<i class=\"bi bi-dot\"></i\r\n                    ><span class=\"author\">By {{ entry.author }}</span></span\r\n                >\r\n                <p class=\"body\">\r\n                    {{ entry.body }}\r\n                </p>\r\n            </RouterLink>\r\n        </li>\r\n    </ul>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { ref } from 'vue';\r\n    import { apiStore, type BlogEntry } from '../../stores/ApiStore';\r\n    import { RouterLink } from 'vue-router';\r\n\r\n    const entryList = ref<BlogEntry[]>();\r\n\r\n    apiStore\r\n        .get()\r\n        .then((data: BlogEntry[] | BlogEntry) => (entryList.value = data as BlogEntry[]))\r\n        .catch((error: any) => console.log(error));\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n    @use '../../scss/common/variables/colors';\r\n    @use '../../scss/common/variables/layout';\r\n\r\n    .entry-list {\r\n        list-style: none;\r\n        padding: 0;\r\n        .entry-list-item {\r\n            border-bottom: 1px dotted colors.$secondary;\r\n            margin-bottom: 1rem;\r\n\r\n            &:last-child {\r\n                border-bottom: none;\r\n            }\r\n\r\n            &:hover {\r\n                .details {\r\n                    color: colors.$secondary;\r\n                }\r\n            }\r\n            .header {\r\n                margin-bottom: 0.2rem;\r\n            }\r\n\r\n            .details {\r\n                display: block;\r\n                margin-bottom: 0.5rem;\r\n                font-size: 0.9rem;\r\n                font-weight: 700;\r\n                color: colors.$primary;\r\n                .author {\r\n                    font-weight: 400;\r\n                }\r\n            }\r\n\r\n            .body {\r\n                line-height: layout.$default-line-height;\r\n                max-height: layout.$default-line-height * 2;\r\n                -webkit-box-orient: vertical;\r\n                display: block;\r\n                display: -webkit-box;\r\n                overflow: hidden !important;\r\n                text-overflow: ellipsis;\r\n                -webkit-line-clamp: 2;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <section class=\"hero\">\r\n        <img src=\"../../assets/images/hero.jpg\" />\r\n        <div class=\"overlay\">\r\n            <div class=\"page-grid\">\r\n                <div class=\"spacing\"></div>\r\n                <div class=\"overlay-content\">\r\n                    <h1 class=\"header\">Welcome to<br />our new blog.</h1>\r\n                    <router-link v-if=\"link !== ''\" :to=\"link\"\r\n                        ><button class=\"btn-primary btn-cta\">Read more</button></router-link\r\n                    >\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </section>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { computed } from 'vue';\r\n    import { apiStore } from '../../stores/ApiStore';\r\n\r\n    const link = computed<string>(() =>\r\n        apiStore.items.length > 0 ? '/entry/' + apiStore.items[apiStore.items.length - 1]._id : ''\r\n    );\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n    @use '../../scss/common/variables/layout';\r\n    @use '../../scss/common/utils/breakpoints';\r\n    @use '../../scss/common/variables/colors';\r\n\r\n    .hero {\r\n        position: relative;\r\n        display: block;\r\n        margin-left: layout.$default-spacing * -1;\r\n        margin-right: layout.$default-spacing * -1;\r\n        margin-top: layout.$default-spacing * -1;\r\n        margin-bottom: layout.$default-spacing * 2;\r\n        img {\r\n            display: block;\r\n            width: 100%;\r\n            object-fit: cover;\r\n            aspect-ratio: 4 / 3;\r\n\r\n            @include breakpoints.from-lg() {\r\n                object-fit: auto;\r\n                aspect-ratio: 23 / 9;\r\n            }\r\n        }\r\n\r\n        .overlay {\r\n            display: block;\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n\r\n            width: 100%;\r\n            height: 100%;\r\n\r\n            .page-grid {\r\n                height: 100%;\r\n            }\r\n\r\n            .overlay-content {\r\n                display: flex;\r\n                flex-direction: column;\r\n                height: 100%;\r\n                padding-left: layout.$default-spacing;\r\n                padding-bottom: 3rem;\r\n                filter: drop-shadow(10px 50px 50px white);\r\n\r\n                .header {\r\n                    margin-top: layout.$default-spacing;\r\n                    margin-bottom: 1rem;\r\n                    line-height: 1.5rem;\r\n                    @include breakpoints.from-sm() {\r\n                        margin-top: 5rem;\r\n                        margin-bottom: layout.$default-spacing;\r\n                        font-size: 2.5rem;\r\n                        line-height: 2.3rem;\r\n                    }\r\n\r\n                    @include breakpoints.from-md() {\r\n                        font-size: 3rem;\r\n                        line-height: 2.7rem;\r\n                    }\r\n\r\n                    filter: drop-shadow(5px 0px 5px white);\r\n                }\r\n\r\n                .btn-cta {\r\n                    align-self: flex-start;\r\n                }\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"entry-view view-padding\">\r\n        <article v-if=\"entry\">\r\n            <div class=\"page-grid\">\r\n                <aside><HomeButton /></aside>\r\n                <header class=\"header\">\r\n                    <h1 class=\"title\">{{ entry.title }}</h1>\r\n                    <p class=\"details\">\r\n                        {{ entry.published }}\r\n                        <i class=\"bi bi-dot\"></i>\r\n                        <span class=\"author\"> By {{ entry.author }}</span>\r\n                    </p>\r\n                </header>\r\n            </div>\r\n            <div v-if=\"entry.img_src\" class=\"image\">\r\n                <img :src=\"entry.img_src\" />\r\n            </div>\r\n\r\n            <div class=\"page-grid\">\r\n                <aside></aside>\r\n                <p class=\"pody\">\r\n                    {{ entry.body }}\r\n                </p>\r\n            </div>\r\n        </article>\r\n        <LoaderSpinner v-else :delay=\"600\" />\r\n    </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n    import { ref } from 'vue';\r\n    import { apiStore, type BlogEntry } from '../stores/ApiStore';\r\n    import HomeButton from '../components/common/HomeButton.vue';\r\n    import LoaderSpinner from '../components/common/LoaderSpinner.vue';\r\n    import { useRoute, useRouter } from 'vue-router';\r\n\r\n    const props = defineProps<{ id: string }>();\r\n    const entry = ref<BlogEntry>();\r\n    const router = useRouter();\r\n    const route = useRoute();\r\n\r\n    apiStore\r\n        .get(props.id)\r\n        .then((data: BlogEntry[] | BlogEntry) => (entry.value = data as BlogEntry))\r\n        .catch((error: any) => {\r\n            console.log('EntryVuew', error);\r\n            pageNotFound();\r\n        });\r\n\r\n    /**\r\n     *\r\n     */\r\n    function pageNotFound(): void {\r\n        router.push({\r\n            name: 'NotFound',\r\n            params: { pathMatch: route.path.substring(1).split('/') },\r\n            query: route.query,\r\n            hash: route.hash,\r\n        });\r\n    }\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n    @use '../scss/common/variables/layout';\r\n    @use '../scss/common/utils/breakpoints';\r\n    @use '../scss/common/variables/colors';\r\n    .entry-view {\r\n        padding-top: layout.$default-spacing;\r\n        padding-bottom: layout.$view-padding-bottom;\r\n        white-space: pre-wrap;\r\n        .header {\r\n            padding-top: 4rem;\r\n            .title {\r\n                font-size: 2rem;\r\n                line-height: 1.9rem;\r\n                margin-bottom: 0.6rem;\r\n\r\n                @include breakpoints.from-md() {\r\n                    font-size: 3rem;\r\n                    line-height: 2.9rem;\r\n                }\r\n            }\r\n\r\n            .details {\r\n                color: colors.$primary;\r\n                font-weight: 700;\r\n                margin-bottom: 1.5rem;\r\n\r\n                .author {\r\n                    font-weight: 400;\r\n                }\r\n            }\r\n        }\r\n        .image {\r\n            display: block;\r\n            margin-left: layout.$default-spacing * -1;\r\n            margin-right: layout.$default-spacing * -1;\r\n            margin-bottom: layout.$default-spacing;\r\n\r\n            @include breakpoints.from-md() {\r\n                margin-bottom: layout.$default-spacing * 1.5;\r\n            }\r\n\r\n            img {\r\n                display: block;\r\n                width: 100%;\r\n                object-fit: cover;\r\n                aspect-ratio: 1;\r\n\r\n                @include breakpoints.from-lg() {\r\n                    aspect-ratio: 16 / 9;\r\n                }\r\n            }\r\n        }\r\n        .body {\r\n            white-space: pre-wrap;\r\n        }\r\n    }\r\n</style>\r\n"],"names":[],"version":3,"file":"index.ec772c90.css.map","sourceRoot":"/__parcel_source_root/"}