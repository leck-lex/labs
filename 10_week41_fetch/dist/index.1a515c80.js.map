{"mappings":"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","sources":["src/js/core/constants/constants.js","src/js/core/services/api/api-service.js","src/js/core/services/game/vo/card-vo.js","src/js/core/services/game/vo/player-vo.js","src/js/core/services/game/game-service.js","src/js/core/app/app.js","src/js/main.js"],"sourcesContent":["export class Constants {\r\n    /** @type {object} */\r\n    static GAME = {\r\n        USER: 'player_user',\r\n        COMPUTER: 'player_wopr',\r\n        WIN: 'win',\r\n        LOSE: 'lose',\r\n        WAR: 'war',\r\n        START_PILE: 26,\r\n    };\r\n\r\n    /** @type {object} */\r\n    static API = {\r\n        BASE_URL: 'https://deckofcardsapi.com/api/deck',\r\n        DECK_TOP: '',\r\n        DECK_BOTTOM: 'bottom/',\r\n        DECK_RANDOM: 'random/',\r\n        LOG: false,\r\n    };\r\n}\r\n","import { Constants } from '../../constants/constants';\r\n\r\nexport class ApiService {\r\n    /** @type {string} */\r\n    #deckID;\r\n\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor() {}\r\n\r\n    /**\r\n     * @param {number} count\r\n     * @returns {Promise}\r\n     */\r\n    async getNewDeck(count = 1) {\r\n        const data = await this.#doApiFetch(`/new/shuffle/?deck_count=${count}`);\r\n        this.#deckID = data.deck_id;\r\n    }\r\n\r\n    /**\r\n     * @param {number} count\r\n     * @param {string} position DECK_TOP (default), DECK_BOTTOM, DECK_RANDOM\r\n     * @returns {Promise}\r\n     */\r\n    drawFromDeck(count, position = Constants.API.DECK_TOP) {\r\n        return this.#doApiFetch(`/${this.#deckID}/draw/${position}?count=${count}`);\r\n    }\r\n\r\n    /**\r\n     * @param {string} pile\r\n     * @param {number} count\r\n     * @param {string} position DECK_TOP (default), DECK_BOTTOM, DECK_RANDOM\r\n     * @returns {Promise}\r\n     */\r\n    drawFromPile(pile, count = 1, position = Constants.API.DECK_BOTTOM) {\r\n        return this.#doApiFetch(`/${this.#deckID}/pile/${pile}/draw/${position}?count=${count}`);\r\n    }\r\n\r\n    /**\r\n     * @param {string} pile\r\n     * @param {object[]} cards\r\n     * @returns {Promise}\r\n     */\r\n    addToPile(pile, cards) {\r\n        return this.#doApiFetch(\r\n            `/${this.#deckID}/pile/${pile}/add/?cards=${this.#getCardCodes(cards)}`\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param {string} req\r\n     * @returns {Promise}\r\n     */\r\n    #doApiFetch(req) {\r\n        return new Promise((resolve, reject) => {\r\n            if (Constants.API.LOG) console.log('%c[API Call]' + req, 'color: grey');\r\n            fetch(Constants.API.BASE_URL + req, {\r\n                method: 'GET',\r\n            })\r\n                .then((res) => {\r\n                    if (!res.ok) {\r\n                        throw new Error(res.statusText);\r\n                    }\r\n                    return res.json();\r\n                })\r\n                .then((data) => {\r\n                    if (Constants.API.LOG) console.log('%c[API Data]', 'color: grey', data);\r\n                    resolve(data);\r\n                })\r\n                .catch((err) => reject(err));\r\n        });\r\n    }\r\n    /**\r\n     * @param {object[]} cards\r\n     * @returns {string}\r\n     */\r\n    #getCardCodes(cards) {\r\n        return cards.map((card) => card.code).join(',');\r\n    }\r\n}\r\n","export class CardVO {\r\n    /**\r\n     * @constructor\r\n     * @param {object} card\r\n     */\r\n    constructor(card) {\r\n        this.code;\r\n        this.image;\r\n        this.images = {\r\n            svg: '',\r\n            png: '',\r\n        };\r\n        this.suit;\r\n        this.value;\r\n        Object.assign(this, card);\r\n    }\r\n\r\n    /**\r\n     * @returns {number}\r\n     */\r\n    get valueByNumber() {\r\n        if (Number.isNaN(Number.parseInt(this.value))) {\r\n            switch (this.value.toUpperCase()) {\r\n                case 'JACK':\r\n                    return 11;\r\n                case 'QUEEN':\r\n                    return 12;\r\n                case 'KING':\r\n                    return 13;\r\n                case 'ACE':\r\n                    return 14;\r\n            }\r\n        } else {\r\n            return +this.value;\r\n        }\r\n    }\r\n}\r\n","export class PlayerVO {\r\n    #state = '';\r\n    #prevState = '';\r\n    /**\r\n     * @constructor\r\n     * @param {string} id\r\n     */\r\n    constructor(id) {\r\n        this.id = id;\r\n        this.card;\r\n        this.ramaining;\r\n        this.endState;\r\n    }\r\n    /**\r\n     * @param {string} value\r\n     */\r\n    set state(value) {\r\n        this.#prevState = this.#state;\r\n        this.#state = value;\r\n    }\r\n\r\n    /**\r\n     * @returns {string}\r\n     */\r\n    get state() {\r\n        return this.#state;\r\n    }\r\n\r\n    /**\r\n     * @returns {string}\r\n     */\r\n    get prevState() {\r\n        return this.#prevState;\r\n    }\r\n}\r\n","import { Constants } from '../../constants/constants';\r\nimport { ApiService } from '../api/api-service';\r\nimport { CardVO } from './vo/card-vo';\r\nimport { PlayerVO } from './vo/player-vo';\r\n\r\nexport class GameService {\r\n    /** @type {ApiService}*/\r\n    #api;\r\n\r\n    /** @type {PlayerVO}*/\r\n    #user;\r\n\r\n    /** @type {PlayerVO}*/\r\n    #computer;\r\n\r\n    /** @type {PlayerVO[]} */\r\n    #players = [];\r\n\r\n    /** @type {Card[]}*/\r\n    #cardsInPlay = [];\r\n\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        this.#api = new ApiService();\r\n    }\r\n\r\n    /**\r\n     * @param {string} id\r\n     * @returns {PlayerVO}\r\n     */\r\n    player(id) {\r\n        return this.#players.find((pVO) => pVO.id === id);\r\n    }\r\n\r\n    /**\r\n     * @returns {Promise}\r\n     */\r\n    async setupNewGame() {\r\n        console.log('%cSetting up new game...', 'color: yellow');\r\n\r\n        this.#user = new PlayerVO(Constants.GAME.USER);\r\n        this.#players.push(this.#user);\r\n\r\n        this.#computer = new PlayerVO(Constants.GAME.COMPUTER);\r\n        this.#players.push(this.#computer);\r\n\r\n        try {\r\n            await this.#api.getNewDeck();\r\n            await this.#setupStartHand(Constants.GAME.USER);\r\n            await this.#setupStartHand(Constants.GAME.COMPUTER);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n\r\n        console.log('%cNew game ready', 'color: yellow');\r\n    }\r\n\r\n    /**\r\n     * @returns {PlayerVO | undefined} PlayerVO is returned if it's the game end winner\r\n     */\r\n    async playRound() {\r\n        console.log('-------------------');\r\n        console.log('%cPlay round', 'color: yellow');\r\n\r\n        try {\r\n            await this.#drawCard(this.#user);\r\n            await this.#drawCard(this.#computer);\r\n\r\n            console.log('user.card: ' + this.#user.card.valueByNumber);\r\n            console.log('computer.card: ' + this.#computer.card.valueByNumber);\r\n\r\n            if (this.#user.card.valueByNumber === this.#computer.card.valueByNumber) {\r\n                console.log('%cWAR', 'color: red');\r\n\r\n                this.#user.state = this.#computer.state = Constants.GAME.WAR;\r\n\r\n                await this.#drawCard(this.#user, true);\r\n                await this.#drawCard(this.#computer, true);\r\n            } else {\r\n                let winner;\r\n                let loser;\r\n\r\n                if (this.#user.card.valueByNumber > this.#computer.card.valueByNumber) {\r\n                    winner = this.#user;\r\n                    loser = this.#computer;\r\n                } else {\r\n                    winner = this.#computer;\r\n                    loser = this.#user;\r\n                }\r\n\r\n                winner.state = Constants.GAME.WIN;\r\n                loser.state = Constants.GAME.LOSE;\r\n\r\n                await this.#awardCardsInPlay(winner);\r\n\r\n                console.log('%cWinner: ', 'color: lightgreen', winner);\r\n                console.log('%cLoser: ', 'color: red', loser);\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n            return;\r\n        }\r\n\r\n        return this.#checkGameEndState();\r\n    }\r\n\r\n    /**\r\n     * @param {id}\r\n     * @returns {Promise}\r\n     */\r\n    async #setupStartHand(id) {\r\n        const apiData = await this.#api.drawFromDeck(Constants.GAME.START_PILE);\r\n        await this.#api.addToPile(id, apiData.cards);\r\n    }\r\n\r\n    /**\r\n     * @param {PlayerVO} pVO\r\n     * @param {boolean} isWarCard\r\n     * @returns {Promise}\r\n     */\r\n    async #drawCard(pVO, isWarCard = false) {\r\n        const apiData = await this.#api.drawFromPile(pVO.id);\r\n        const card = new CardVO(apiData.cards[0]);\r\n        if (!isWarCard) pVO.card = card;\r\n        this.#cardsInPlay.push(card);\r\n        pVO.remaining = apiData.piles[pVO.id].remaining;\r\n    }\r\n\r\n    /**\r\n     * @param {PlayerVO} pVO\r\n     * @returns {Promise}\r\n     */\r\n    async #awardCardsInPlay(pVO) {\r\n        console.log('Cards in play for winner: ', this.#cardsInPlay);\r\n        const apiData = await this.#api.addToPile(pVO.id, this.#cardsInPlay);\r\n        pVO.remaining = apiData.piles[pVO.id].remaining;\r\n        this.#cardsInPlay = [];\r\n    }\r\n\r\n    /**\r\n     * @returns {PlayerVO}\r\n     */\r\n    #checkGameEndState() {\r\n        const loser = this.#players.find((pVO) => pVO.remaining == 0);\r\n        let winner;\r\n        if (loser) {\r\n            winner = this.#players.find((pVO) => pVO.remaining != 0);\r\n            winner.endState = Constants.GAME.WIN;\r\n            loser.endState = Constants.GAME.LOSE;\r\n\r\n            console.log('-------------------');\r\n            console.log('%cGame Over!', 'color: yellow');\r\n            console.log('%cWinner: ', 'color: lightgreen', winner);\r\n            console.log('%cLoser: ', 'color: red', loser);\r\n        }\r\n        return winner;\r\n    }\r\n}\r\n","import { GameService } from '../services/game/game-service';\r\n\r\nexport class App {\r\n    /** @type {App} */\r\n    static #instance;\r\n\r\n    /**\r\n     * @returns {App} global instance of App\r\n     */\r\n    static get instance() {\r\n        if (!this.#instance) {\r\n            this.#instance = new App();\r\n        }\r\n        return this.#instance;\r\n    }\r\n\r\n    /** @type {GameService} */\r\n    #gameService;\r\n\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor() {}\r\n\r\n    /**\r\n     * @returns {GameService}\r\n     */\r\n    get gameService() {\r\n        return this.#gameService;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    run() {\r\n        document\r\n            .querySelector('main')\r\n            .insertAdjacentElement('afterbegin', document.createElement('p')).innerHTML =\r\n            '(User interface coming soon...)';\r\n        document\r\n            .querySelector('main')\r\n            .insertAdjacentElement('afterbegin', document.createElement('h1')).innerHTML =\r\n            'Card Game: War';\r\n\r\n        this.#gameService = new GameService();\r\n\r\n        //Test interface for logging of game\r\n        const btnStart = document.createElement('button');\r\n        btnStart.innerText = 'Log New Game';\r\n        btnStart.classList.add('generic-button');\r\n        btnStart.addEventListener('click', () => {\r\n            btnRound.disabled = true;\r\n            this.#gameService.setupNewGame().then(() => (btnRound.disabled = false));\r\n        });\r\n        document.querySelector('main').appendChild(btnStart);\r\n\r\n        const btnRound = document.createElement('button');\r\n        btnRound.style.marginLeft = '10px';\r\n        btnRound.innerText = 'Log Play Round';\r\n        btnRound.classList.add('generic-button');\r\n        btnRound.disabled = true;\r\n        btnRound.addEventListener('click', () => {\r\n            this.#gameService.playRound().then((gameEndWinner) => {\r\n                if (gameEndWinner) {\r\n                    btnRound.disabled = true;\r\n                }\r\n            });\r\n        });\r\n        document.querySelector('main').appendChild(btnRound);\r\n        //\r\n    }\r\n}\r\n","import { App } from './core/app/app';\r\n\r\nApp.instance.run();\r\n"],"names":["$130e4b16319a87dd$export$a002182e51710d39","static","USER","COMPUTER","WIN","LOSE","WAR","START_PILE","BASE_URL","DECK_TOP","DECK_BOTTOM","DECK_RANDOM","LOG","$7ee73f43de181479$export$ae14c375fc93363","deckID","constructor","async","count","data","this","doApiFetch","deck_id","drawFromDeck","position","API","pile","addToPile","cards","getCardCodes","$0ac6671818a68af8$export$7e4b2a3baa1d4ac5","card","code","image","images","svg","png","suit","value","Object","assign","Number","isNaN","parseInt","toUpperCase","$bb42ebca7b7678a0$export$c05af758d9b62120","state","prevState","id","ramaining","endState","$9781d5e675d91a8d$export$76299a8db1a98dcd","api","user","computer","players","cardsInPlay","player","find","pVO","log","GAME","push","getNewDeck","setupStartHand","error","console","drawCard","valueByNumber","winner","loser","awardCardsInPlay","checkGameEndState","apiData","isWarCard","apiData1","drawFromPile","remaining","piles","pVO1","$8749b53f6ce1d40a$export$86fbec116b87613f","instance","gameService","run","querySelector","insertAdjacentElement","document","createElement","innerHTML","btnStart","innerText","classList","add","addEventListener","btnRound","disabled","setupNewGame","then","appendChild","style","marginLeft"],"version":3,"file":"index.1a515c80.js.map"}