class e{static GAME={USER:"player_user",COMPUTER:"player_wopr",WIN:"win",LOSE:"lose",WAR:"war",START_PILE:26};static API={BASE_URL:"https://deckofcardsapi.com/api/deck",DECK_TOP:"",DECK_BOTTOM:"bottom/",DECK_RANDOM:"random/",LOG:!1}}class t{#e;constructor(){}async getNewDeck(e=1){const t=await this.#t(`/new/shuffle/?deck_count=${e}`);this.#e=t.deck_id}drawFromDeck(t,a=e.API.DECK_TOP){return this.#t(`/${this.#e}/draw/${a}?count=${t}`)}drawFromPile(t,a=1,r=e.API.DECK_BOTTOM){return this.#t(`/${this.#e}/pile/${t}/draw/${r}?count=${a}`)}addToPile(e,t){return this.#t(`/${this.#e}/pile/${e}/add/?cards=${this.#a(t)}`)}#t(t){return new Promise(((a,r)=>{e.API.LOG&&console.log("%c[API Call]"+t,"color: grey"),fetch(e.API.BASE_URL+t,{method:"GET"}).then((e=>{if(!e.ok)throw new Error(e.statusText);return e.json()})).then((t=>{e.API.LOG&&console.log("%c[API Data]","color: grey",t),a(t)})).catch((e=>r(e)))}))}#a(e){return e.map((e=>e.code)).join(",")}}class a{constructor(e){this.code,this.image,this.images={svg:"",png:""},this.suit,this.value,Object.assign(this,e)}get valueByNumber(){if(!Number.isNaN(Number.parseInt(this.value)))return+this.value;switch(this.value.toUpperCase()){case"JACK":return 11;case"QUEEN":return 12;case"KING":return 13;case"ACE":return 14}}}class r{#r="";#s="";constructor(e){this.id=e,this.card,this.ramaining,this.endState}set state(e){this.#s=this.#r,this.#r=e}get state(){return this.#r}get prevState(){return this.#s}}class s{#i;#n;#c;#o=[];#l=[];constructor(){this.#i=new t}player(e){return this.#o.find((t=>t.id===e))}async setupNewGame(){console.log("%cSetting up new game...","color: yellow"),this.#n=new r(e.GAME.USER),this.#o.push(this.#n),this.#c=new r(e.GAME.COMPUTER),this.#o.push(this.#c);try{await this.#i.getNewDeck(),await this.#d(e.GAME.USER),await this.#d(e.GAME.COMPUTER)}catch(e){console.error(e)}console.log("%cNew game ready","color: yellow")}async playRound(){console.log("-------------------"),console.log("%cPlay round","color: yellow");try{if(await this.#u(this.#n),await this.#u(this.#c),console.log("user.card: "+this.#n.card.valueByNumber),console.log("computer.card: "+this.#c.card.valueByNumber),this.#n.card.valueByNumber===this.#c.card.valueByNumber)console.log("%cWAR","color: red"),this.#n.state=this.#c.state=e.GAME.WAR,await this.#u(this.#n,!0),await this.#u(this.#c,!0);else{let t,a;this.#n.card.valueByNumber>this.#c.card.valueByNumber?(t=this.#n,a=this.#c):(t=this.#c,a=this.#n),t.state=e.GAME.WIN,a.state=e.GAME.LOSE,await this.#h(t),console.log("%cWinner: ","color: lightgreen",t),console.log("%cLoser: ","color: red",a)}}catch(e){return void console.error(e)}return this.#m()}async#d(t){const a=await this.#i.drawFromDeck(e.GAME.START_PILE);await this.#i.addToPile(t,a.cards)}async#u(e,t=!1){const r=await this.#i.drawFromPile(e.id),s=new a(r.cards[0]);t||(e.card=s),this.#l.push(s),e.remaining=r.piles[e.id].remaining}async#h(e){console.log("Cards in play for winner: ",this.#l);const t=await this.#i.addToPile(e.id,this.#l);e.remaining=t.piles[e.id].remaining,this.#l=[]}#m(){const t=this.#o.find((e=>0==e.remaining));let a;return t&&(a=this.#o.find((e=>0!=e.remaining)),a.endState=e.GAME.WIN,t.endState=e.GAME.LOSE,console.log("-------------------"),console.log("%cGame Over!","color: yellow"),console.log("%cWinner: ","color: lightgreen",a),console.log("%cLoser: ","color: red",t)),a}}class i{static#p;static get instance(){return this.#p||(this.#p=new i),this.#p}#g;constructor(){}get gameService(){return this.#g}run(){document.querySelector("main").insertAdjacentElement("afterbegin",document.createElement("p")).innerHTML="(User interface coming soon...)",document.querySelector("main").insertAdjacentElement("afterbegin",document.createElement("h1")).innerHTML="Card Game: War",this.#g=new s;const e=document.createElement("button");e.innerText="Log New Game",e.classList.add("generic-button"),e.addEventListener("click",(()=>{t.disabled=!0,this.#g.setupNewGame().then((()=>t.disabled=!1))})),document.querySelector("main").appendChild(e);const t=document.createElement("button");t.style.marginLeft="10px",t.innerText="Log Play Round",t.classList.add("generic-button"),t.disabled=!0,t.addEventListener("click",(()=>{this.#g.playRound().then((e=>{e&&(t.disabled=!0)}))})),document.querySelector("main").appendChild(t)}}i.instance.run();
//# sourceMappingURL=index.1a515c80.js.map
