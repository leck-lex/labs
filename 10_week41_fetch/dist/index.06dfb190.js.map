{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-8e5efe2400bb3bc5.js","node_modules/@parcel/runtime-js/lib/runtime-a4be54882d81adfc.js","src/js/core/constants/constants.js","src/js/core/element/config/element-config.js","src/js/core/element/custom-element.js","src/js/core/services/game/vo/player-vo.js","src/js/components/tooltip/tooltip.js","src/js/components/tooltip/config/tooltipconfig.js","src/js/components/game/card/card.js","node_modules/@parcel/runtime-js/lib/bundles/runtime-4dad77fe960cef77.js","src/js/components/game/hud/hud.js","node_modules/@parcel/runtime-js/lib/bundles/runtime-a9b19bd5da87ec39.js","src/js/components/game/overlay/overlay.js","node_modules/@parcel/runtime-js/lib/bundles/runtime-2f77db9986b582cc.js","node_modules/@parcel/runtime-js/lib/bundles/runtime-2c92299f48e86abf.js","node_modules/@parcel/runtime-js/lib/bundles/runtime-8cce56c503cd926b.js","node_modules/@parcel/runtime-js/lib/bundles/runtime-0c8ae1e0de99037c.js","src/js/components/game/game.js","node_modules/@parcel/runtime-js/lib/bundles/runtime-74b8bfa3747038e9.js","src/js/core/services/api/api-service.js","src/js/core/services/game/vo/card-vo.js","src/js/core/services/game/game-service.js","src/js/core/app/app.js","src/js/main.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"1PCjP\")).toString();","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"g3LtT\\\":\\\"index.06dfb190.js\\\",\\\"1PCjP\\\":\\\"war.34d96e76.gif\\\",\\\"az9Gg\\\":\\\"card-back-2.75829339.png\\\",\\\"cKcPc\\\":\\\"wargames_logo.6673790a.webp\\\",\\\"32S1s\\\":\\\"intro.b02d6007.jpg\\\"}\"));","export class Constants {\r\n    /** @type {object} */\r\n    static GAME = {\r\n        USER: 'user',\r\n        COMPUTER: 'computer',\r\n        WIN: 'win',\r\n        LOSE: 'lose',\r\n        WAR: 'war',\r\n        ERROR: 'error',\r\n        START_PILE: 26,\r\n        OVERLAY: {\r\n            WAR: 'overlay-war',\r\n            START: 'overlay-start',\r\n            GAME_OVER: 'overlay-game-over',\r\n            HELP: 'overlay-help',\r\n        },\r\n        DEV_MODE: '1',\r\n    };\r\n\r\n    /** @type {object} */\r\n    static API = {\r\n        BASE_URL: 'https://deckofcardsapi.com/api/deck',\r\n        DECK_TOP: '',\r\n        DECK_BOTTOM: 'bottom/',\r\n        DECK_RANDOM: 'random/',\r\n        LOG: false,\r\n    };\r\n}\r\n","export class ElementConfig {\r\n    /** @type {string[]}*/\r\n    #classList = [];\r\n    /**\r\n     * @constructor\r\n     * @param {object} init\r\n     */\r\n    constructor(init) {\r\n        this.id;\r\n        this.options;\r\n\r\n        this.populate(init);\r\n    }\r\n\r\n    /**\r\n     * @param {*} space-separated string or an array of class-names\r\n     */\r\n    set classList(value) {\r\n        if (typeof value === 'string') {\r\n            value = value.split(' ');\r\n        }\r\n        this.#classList = [...this.#classList, ...value];\r\n    }\r\n    /**\r\n     * @returns {string[]}\r\n     */\r\n    get classList() {\r\n        return this.#classList;\r\n    }\r\n    /**\r\n     * @param {object} init\r\n     */\r\n    populate(init) {\r\n        if (init) Object.assign(this, init);\r\n    }\r\n}\r\n","import { ElementConfig } from './config/element-config';\r\n\r\nexport class CustomElement extends HTMLElement {\r\n    /** @type {ElementConfig} */\r\n    #config;\r\n\r\n    /**\r\n     * @constructor\r\n     * @param {ElementConfig} config optional\r\n     */\r\n    constructor(config) {\r\n        super();\r\n        this.config = config ? config : new ElementConfig();\r\n        this.validateConfig();\r\n        this.populateFromConfig();\r\n    }\r\n\r\n    /**\r\n     * @param {ElementConfig} config\r\n     */\r\n    set config(config) {\r\n        this.#config = config;\r\n    }\r\n\r\n    /**\r\n     * @returns {ElementConfig}\r\n     */\r\n    get config() {\r\n        return this.#config;\r\n    }\r\n\r\n    /**\r\n     * @returns {object}\r\n     * @comment Override this getter to register default component id and classlist if needed\r\n     */\r\n    get defaults() {\r\n        return { id: '', classList: '' };\r\n    }\r\n\r\n    /**\r\n     * @param {string} htmlString\r\n     */\r\n    render(htmlString) {\r\n        this.innerHTML = htmlString;\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLElement} element\r\n     * @returns {CustomElement}\r\n     */\r\n    appendTo(element) {\r\n        element.append(this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLElement} element\r\n     * @returns {CustomElement}\r\n     */\r\n    prependTo(element) {\r\n        element.prepend(this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    validateConfig() {\r\n        this.config.id = this.config.id ? this.config.id : this.defaults.id;\r\n        this.config.classList = this.defaults.classList;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    populateFromConfig() {\r\n        this.id = this.config.id;\r\n        this.classList.add(...this.config.classList);\r\n    }\r\n    /**\r\n     *\r\n     */\r\n    destroy() {\r\n        if (this.parentElement) this.parentElement.removeChild(this);\r\n    }\r\n}\r\n","export class PlayerVO {\r\n    /**\r\n     * @constructor\r\n     * @param {string} id\r\n     */\r\n    constructor(id) {\r\n        this.id = id;\r\n        this.card;\r\n        this.ramaining;\r\n        this.state;\r\n        this.prevState;\r\n    }\r\n}\r\n","import { CustomElement } from '../../core/element/custom-element';\r\nimport { TooltipConfig } from './config/tooltipconfig';\r\n\r\nexport class Tooltip extends CustomElement {\r\n    /** @type {string} */\r\n    static MODE_INFO = 'info';\r\n\r\n    /** @type {string} */\r\n    static MODE_SUCCESS = 'success';\r\n\r\n    /** @type {string} */\r\n    static MODE_ERROR = 'error';\r\n\r\n    /** @type {string} */\r\n    static POSITION_GLOBAL = 'global';\r\n\r\n    /** @type {string} */\r\n    static POSITION_TARGET = 'target';\r\n\r\n    /** @type {number} */\r\n    #arrowHeight = 20;\r\n\r\n    /**\r\n     * @constructor\r\n     * @param { TooltipConfig} config\r\n     */\r\n    constructor(config) {\r\n        super(config);\r\n        this.render();\r\n    }\r\n\r\n    /**\r\n     * @returns {object}\r\n     */\r\n    get defaults() {\r\n        return { id: 'tooltip', classList: 'tooltip' };\r\n    }\r\n\r\n    /**\r\n     * @returns {HTMLElement}\r\n     */\r\n    get targetElement() {\r\n        return this.config.targetElement;\r\n    }\r\n\r\n    /**\r\n     * @returns {object}\r\n     */\r\n    get globalPosition() {\r\n        const rectTarget = this.config.targetElement.getBoundingClientRect();\r\n        return {\r\n            left: rectTarget.left + window.scrollX + this.config.offsetX,\r\n            top:\r\n                rectTarget.top +\r\n                window.scrollY +\r\n                this.config.offsetY -\r\n                this.offsetHeight -\r\n                this.#arrowHeight,\r\n        };\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    render() {\r\n        super.render(this.config.msg);\r\n        this.classList.add(this.config.mode, 'show');\r\n\r\n        if (this.config.position === Tooltip.POSITION_GLOBAL) {\r\n            document.body.appendChild(this);\r\n            this.style.left = this.globalPosition.left + 'px';\r\n            this.style.top = this.globalPosition.top + 'px';\r\n\r\n            if (this.offsetLeft + this.offsetWidth > document.body.clientWidth) {\r\n                this.style.marginLeft = this.config.offsetX - this.offsetWidth + 'px';\r\n                this.classList.add('left');\r\n            }\r\n        } else {\r\n            this.targetElement.appendChild(this);\r\n            this.style.left = this.config.offsetX + 'px';\r\n            this.style.top = this.config.offsetY - this.offsetHeight - this.#arrowHeight + 'px';\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     */\r\n    destroy() {\r\n        if (this.parentElement) this.parentElement.removeChild(this);\r\n    }\r\n}\r\n\r\n/**\r\n * @comment Register as custom html-element\r\n */\r\nwindow.customElements.define('component-tooltip', Tooltip);\r\n","import { ElementConfig } from '../../../core/element/config/element-config';\r\nimport { Tooltip } from '../tooltip';\r\n\r\nexport class TooltipConfig extends ElementConfig {\r\n    /**\r\n     * @constructor\r\n     * @param {object} init\r\n     * @comment default values in constructor\r\n     */\r\n    constructor(init) {\r\n        super();\r\n        this.mode = Tooltip.MODE_INFO;\r\n        this.targetElement = document.body;\r\n        this.position = Tooltip.POSITION_GLOBAL;\r\n        this.offsetX = 200;\r\n        this.offsetY = 200;\r\n        this.msg = 'Tooltip text here';\r\n        this.populate(init);\r\n    }\r\n}\r\n","import HTMLTemplate from 'bundle-text:./card.html';\r\nimport { Constants } from '../../../core/constants/constants';\r\nimport { CustomElement } from '../../../core/element/custom-element';\r\nimport { PlayerVO } from '../../../core/services/game/vo/player-vo';\r\n\r\nexport class Card extends CustomElement {\r\n    /** @type {number} */\r\n    #animIndex = 0;\r\n\r\n    /** @type {string} */\r\n    #animOutState;\r\n\r\n    /** @type {number} */\r\n    #animZIndex;\r\n\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor(config) {\r\n        super(config);\r\n        this.render();\r\n    }\r\n\r\n    /**\r\n     * @returns {object}\r\n     */\r\n    get defaults() {\r\n        return { id: 'game-card', classList: 'game__card' };\r\n    }\r\n\r\n    /**\r\n     *  @returns {PlayerVO}\r\n     */\r\n    get player() {\r\n        return this.config.options.pVO;\r\n    }\r\n\r\n    /**\r\n     * @returns {boolean}\r\n     */\r\n    get isUser() {\r\n        return this.player.id === Constants.GAME.USER;\r\n    }\r\n\r\n    /**\r\n     * @returns {boolean}\r\n     */\r\n    get isWarCard() {\r\n        return this.config.options.isWarCard;\r\n    }\r\n\r\n    /**\r\n     * @param {number} value\r\n     */\r\n    set animIndex(value) {\r\n        this.#animIndex = value;\r\n    }\r\n\r\n    /**\r\n     * @param {string} value\r\n     */\r\n    set animOutState(value) {\r\n        this.#animOutState = value;\r\n    }\r\n\r\n    /**\r\n     * @param {number} value\r\n     */\r\n    set animZIndex(value) {\r\n        this.#animZIndex = value;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    render() {\r\n        super.render(HTMLTemplate);\r\n        this.classList.add(this.config.options.pVO.id);\r\n\r\n        if (!this.isWarCard) {\r\n            const img = this.config.options.pVO.card.imageElement;\r\n            this.querySelector('.game__card-front').appendChild(img);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns {Promise}\r\n     */\r\n    animateIn() {\r\n        return this.#animate('in');\r\n    }\r\n\r\n    /**\r\n     * @returns {Promise}\r\n     */\r\n    animateOut() {\r\n        return this.#animate('out');\r\n    }\r\n\r\n    /**\r\n     * @param {string} dir\r\n     * @returns {Promise}\r\n     */\r\n    #animate(dir) {\r\n        const classList = [];\r\n        let delayFactor;\r\n\r\n        if (dir === 'in') {\r\n            classList.push('animate-in');\r\n            if (this.isWarCard) classList.push('war');\r\n            delayFactor = 0.5;\r\n        } else {\r\n            this.classList.remove('animate-in');\r\n            classList.push('animate-out');\r\n            classList.push(this.#animOutState);\r\n            delayFactor = 0.2;\r\n            this.parentElement.style.zIndex = 25;\r\n        }\r\n\r\n        this.style.zIndex = this.#animZIndex;\r\n\r\n        const delay = this.#animIndex * delayFactor + 's';\r\n        this.querySelector('.game__card-inner').style.animationDelay = delay;\r\n\r\n        this.onanimationstart = () => {\r\n            if (this.player.remaining === 0)\r\n                document.querySelector('#slot-pile-' + this.player.id).classList.add('is-hidden');\r\n        };\r\n\r\n        return new Promise((resolve) => {\r\n            this.onanimationend = () => {\r\n                this.parentElement.style.zIndex = 'auto';\r\n                this.style.zIndex = 'auto';\r\n                resolve();\r\n            };\r\n\r\n            this.classList.add(...classList);\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * @comment Register as custom html-element\r\n */\r\nwindow.customElements.define('element-card', Card);\r\n","module.exports = \"b997475d93acb790\";","import HTMLTemplate from 'bundle-text:./hud.html';\r\nimport { CustomElement } from '../../../core/element/custom-element';\r\n\r\nexport class Hud extends CustomElement {\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor(config) {\r\n        super(config);\r\n        this.render();\r\n    }\r\n\r\n    /**\r\n     * @returns {object}\r\n     */\r\n    get defaults() {\r\n        return { id: 'game-hud', classList: 'game__hud' };\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    render() {\r\n        super.render(HTMLTemplate);\r\n        this.classList.add(this.config.options.player);\r\n        this.querySelector('.game__hud-name').innerHTML = this.config.options.name;\r\n        this.update(0);\r\n    }\r\n\r\n    /**\r\n     * @param {number} remainingCards\r\n     */\r\n    update(remainingCards) {\r\n        this.querySelector('.game__hud-score-points').innerHTML = remainingCards;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    animateIn() {\r\n        this.classList.remove('animate-out');\r\n        this.classList.add('animate-in');\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    animateOut() {\r\n        if (this.classList.contains('animate-in')) {\r\n            this.classList.add('animate-out');\r\n        }\r\n        this.classList.remove('animate-in');\r\n    }\r\n}\r\n\r\n/**\r\n * @comment Register as custom html-element\r\n */\r\nwindow.customElements.define('element-hud', Hud);\r\n","module.exports = \"947f07f2017a0ca8\";","import HTMLTemplateStart from 'bundle-text:./overlay-start.html';\r\nimport HTMLTemplateWar from 'bundle-text:./overlay-war.html';\r\nimport HTMLTemplateGameOver from 'bundle-text:./overlay-game-over.html';\r\nimport HTMLTemplateHelp from 'bundle-text:./overlay-help.html';\r\nimport { Constants } from '../../../core/constants/constants';\r\nimport { CustomElement } from '../../../core/element/custom-element';\r\nimport { App } from '../../../core/app/app';\r\n\r\nexport class Overlay extends CustomElement {\r\n    /** @type {string} */\r\n    #displayTime;\r\n\r\n    /** @type {boolean} */\r\n    #isInAnimation = false;\r\n\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor(config) {\r\n        super(config);\r\n        this.render();\r\n    }\r\n\r\n    /**\r\n     * @returns {object}\r\n     */\r\n    get defaults() {\r\n        return { id: 'game-overlay', classList: 'game__overlay' };\r\n    }\r\n\r\n    /**\r\n     * @returns {string}\r\n     */\r\n    get mode() {\r\n        return this.config.options.mode;\r\n    }\r\n\r\n    /**\r\n     * @returns {string}\r\n     */\r\n    get state() {\r\n        return this.config.options.state;\r\n    }\r\n\r\n    /**\r\n     * @returns {boolean}\r\n     */\r\n    get isInAnimnation() {\r\n        return this.#isInAnimation;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    render() {\r\n        switch (this.mode) {\r\n            case Constants.GAME.OVERLAY.START:\r\n                this.#renderStart();\r\n                break;\r\n            case Constants.GAME.OVERLAY.WAR:\r\n                this.#renderWar();\r\n                break;\r\n            case Constants.GAME.OVERLAY.GAME_OVER:\r\n                this.#renderGameOver();\r\n                break;\r\n            case Constants.GAME.OVERLAY.HELP:\r\n                this.#renderHelp();\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    #renderStart() {\r\n        this.classList.add('game__overlay-start');\r\n        super.render(HTMLTemplateStart);\r\n        this.#setupNewGameButton();\r\n        this.animateIn();\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    #renderWar() {\r\n        this.classList.add('game__overlay-war');\r\n        this.#displayTime = '2.5s';\r\n        super.render(HTMLTemplateWar);\r\n\r\n        this.querySelector('.screen').appendChild(this.config.options.img);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    #renderGameOver() {\r\n        this.classList.add('game__overlay-game-over', this.state);\r\n        super.render(HTMLTemplateGameOver);\r\n        if (this.state !== Constants.GAME.ERROR) this.#setupNewGameButton();\r\n        this.animateIn();\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    #renderHelp() {\r\n        this.classList.add('game__overlay-help');\r\n        super.render(HTMLTemplateHelp);\r\n        this.animateIn();\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    #setupNewGameButton() {\r\n        this.querySelector('#btn-new-game').addEventListener('click', () =>\r\n            this.animateOut().then(() => App.instance.game.newGame())\r\n        );\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    animateIn() {\r\n        return this.#animate('animate-in');\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    animateOut() {\r\n        if (this.#displayTime) this.style.animationDelay = this.#displayTime;\r\n        return this.#animate('animate-out');\r\n    }\r\n\r\n    /**\r\n     * @param {string} className\r\n     */\r\n    #animate(className) {\r\n        this.#isInAnimation = true;\r\n        return new Promise((resolve) => {\r\n            this.onanimationend = () => {\r\n                this.#isInAnimation = false;\r\n                resolve();\r\n            };\r\n            this.classList.add(className);\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * @comment Register as custom html-element\r\n */\r\nwindow.customElements.define('element-overlay', Overlay);\r\n","module.exports = \"6c4fa382c1e0fb61\";","module.exports = \"6a83e43a5a671a48\";","module.exports = \"d4d0918f66f2a1bd\";","module.exports = \"ebbe6e87a7cde660\";","import HTMLTemplate from 'bundle-text:./game.html';\r\nimport { App } from '../../core/app/app';\r\nimport { Constants } from '../../core/constants/constants';\r\nimport { ElementConfig } from '../../core/element/config/element-config';\r\nimport { CustomElement } from '../../core/element/custom-element';\r\nimport { PlayerVO } from '../../core/services/game/vo/player-vo';\r\nimport { TooltipConfig } from '../tooltip/config/tooltipconfig';\r\nimport { Tooltip } from '../tooltip/tooltip';\r\nimport { Card } from './card/card';\r\nimport { Hud } from './hud/hud';\r\nimport { Overlay } from './overlay/overlay';\r\n\r\nexport class Game extends CustomElement {\r\n    /** @type {Card[]}*/\r\n    #cards = [];\r\n\r\n    /** @type {Hud[]}*/\r\n    #huds = [];\r\n\r\n    /** @type {HTMLElement[]}*/\r\n    #piles = [];\r\n\r\n    /** @type {HTMLElement}*/\r\n    #btnDeal;\r\n\r\n    /** @type {HTMLButtonElement}*/\r\n    #btnHelp;\r\n\r\n    /** @type {HTMLElement}*/\r\n    #overlayStart;\r\n\r\n    /** @type {HTMLElement}*/\r\n    #overlayWar;\r\n\r\n    /** @type {HTMLElement}*/\r\n    #overlayGameOver;\r\n\r\n    /** @type {HTMLElement}*/\r\n    #overlayHelp;\r\n\r\n    /** @type {object}*/\r\n    #turnResult;\r\n\r\n    /** @type {number}*/\r\n    #timeout;\r\n\r\n    /** @type {boolean} */\r\n    #isWar;\r\n\r\n    /** @type {ToolTip} */\r\n    #tooltip;\r\n\r\n    /** @type {boolean} */\r\n    #firstRun = true;\r\n\r\n    /** @type {HTMLImageElement} */\r\n    #warImage;\r\n\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @returns {object}\r\n     */\r\n    get defaults() {\r\n        return { id: 'game', classList: 'game' };\r\n    }\r\n\r\n    /**\r\n     * @returns {Image}\r\n     */\r\n    get warImage() {\r\n        return this.#warImage;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    render() {\r\n        super.render(HTMLTemplate);\r\n\r\n        this.#createHud(Constants.GAME.USER, 'YOU').appendTo(this);\r\n        this.#createHud(Constants.GAME.COMPUTER, 'WOPR').prependTo(this);\r\n\r\n        this.#setupDealButton();\r\n        this.#toggleDealButton(false);\r\n\r\n        this.#setupHelpButton();\r\n\r\n        this.#piles.push(this.#btnDeal);\r\n        this.#piles.push(this.querySelector('#slot-pile-' + Constants.GAME.COMPUTER));\r\n\r\n        this.#warImage = new Image();\r\n        this.#warImage.src = require('../../../../assets/gif/war.gif');\r\n\r\n        this.#overlayStart = this.#createOverlay(Constants.GAME.OVERLAY.START);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    newGame() {\r\n        this.#toggleLoader(true);\r\n        this.#resetGame();\r\n        App.instance.gameService\r\n            .setupNewGame()\r\n            .then((pileSize) => this.#gameReady(pileSize))\r\n            .catch((error) => {\r\n                console.error('Game.newGame');\r\n                console.error(error);\r\n                this.#toggleLoader(false);\r\n                this.#displayError();\r\n            });\r\n    }\r\n\r\n    /**\r\n     * @param {number} pileSize\r\n     */\r\n    #gameReady(pileSize) {\r\n        this.#cards = [];\r\n\r\n        this.#toggleLoader(false);\r\n\r\n        this.#updateHud(Constants.GAME.COMPUTER, pileSize);\r\n        this.#updateHud(Constants.GAME.USER, pileSize);\r\n\r\n        this.#toggleDealButton(true);\r\n\r\n        this.#togglePiles(true);\r\n\r\n        if (this.#firstRun) {\r\n            this.#toggleTooltip(true);\r\n            this.#firstRun = false;\r\n        }\r\n\r\n        this.#animateInHuds();\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    #setupDealButton() {\r\n        this.#btnDeal = this.querySelector('#slot-pile-' + Constants.GAME.USER);\r\n        this.#btnDeal.addEventListener('click', () => {\r\n            this.#toggleDealButton(false);\r\n            this.#toggleTooltip(false);\r\n            App.instance.gameService\r\n                .playTurn()\r\n                .then((result) => {\r\n                    if (result) {\r\n                        this.#drawTurnResult(result);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    console.error('Game.#btnDeal.click');\r\n                    console.error(error);\r\n                    this.#displayError();\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    #setupHelpButton() {\r\n        this.#btnHelp = this.querySelector('#btn-help');\r\n        this.#btnHelp.addEventListener('click', () => {\r\n            this.#toggleHelp();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param {object} result\r\n     */\r\n    #drawTurnResult(result) {\r\n        if (!this.#isWar) this.#cards = [];\r\n\r\n        this.#turnResult = result;\r\n\r\n        this.#createCard(this.#turnResult.user);\r\n        this.#createCard(this.#turnResult.computer);\r\n\r\n        this.#turnAnimIn();\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    #turnAnimIn() {\r\n        Promise.all(this.#getCardAnimQueue('in', this.#cards.length - 2)).then(() => {\r\n            this.#turnAnimInDone();\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    #turnAnimInDone() {\r\n        if (this.#turnResult.isWar) {\r\n            this.#isWar = true;\r\n            this.#displayWar();\r\n        } else {\r\n            this.#isWar = false;\r\n            setTimeout(() => {\r\n                this.#turnAnimOut();\r\n            }, 750);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    #displayWar() {\r\n        this.#timeout = setTimeout(() => {\r\n            this.#overlayWar = this.#createOverlay(\r\n                Constants.GAME.OVERLAY.WAR,\r\n                null,\r\n                this.#warImage\r\n            );\r\n            this.#overlayWar\r\n                .animateIn()\r\n                .then(() => this.#overlayWar.animateOut())\r\n                .then(() => {\r\n                    this.#destroyElement(this.#overlayWar);\r\n\r\n                    let numCards = 0;\r\n                    const checkRemaining = (player) => {\r\n                        if (player.remaining > 0) {\r\n                            this.#createCard(player, true);\r\n                            numCards += 1;\r\n                        }\r\n                    };\r\n                    checkRemaining(this.#turnResult.user);\r\n                    checkRemaining(this.#turnResult.computer);\r\n                    if (numCards > 0) {\r\n                        return Promise.all(\r\n                            this.#getCardAnimQueue('in', this.#cards.length - numCards)\r\n                        );\r\n                    } else {\r\n                        this.#warGameOver();\r\n                    }\r\n                })\r\n                .then(() => {\r\n                    if (this.#turnResult.isGameOver) {\r\n                        this.#warGameOver();\r\n                    } else {\r\n                        this.#toggleDealButton(true);\r\n                    }\r\n                });\r\n        }, 1000);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    #warGameOver() {\r\n        this.#updateHud(Constants.GAME.COMPUTER, this.#turnResult.computer.remaining);\r\n        this.#updateHud(Constants.GAME.USER, this.#turnResult.user.remaining);\r\n\r\n        this.#gameOver();\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    #turnAnimOut() {\r\n        this.#updateHud(Constants.GAME.COMPUTER, this.#turnResult.computer.remaining);\r\n        this.#updateHud(Constants.GAME.USER, this.#turnResult.user.remaining);\r\n\r\n        Promise.all(this.#getCardAnimQueue('out')).then(() => {\r\n            this.#turnAnimOutDone();\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    #turnAnimOutDone() {\r\n        this.#destroyCards();\r\n\r\n        if (this.#turnResult.isGameOver) {\r\n            this.#gameOver();\r\n        } else {\r\n            this.#toggleDealButton(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {string} state\r\n     */\r\n    #gameOver(state = undefined) {\r\n        if (!state) this.#highlightLoserPile();\r\n\r\n        this.#toggleDealButton(false);\r\n\r\n        this.#timeout = setTimeout(() => {\r\n            this.#overlayGameOver = this.#createOverlay(Constants.GAME.OVERLAY.GAME_OVER, state);\r\n        }, 2000);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    #highlightLoserPile() {\r\n        this.querySelector(`#slot-pile-${this.#turnResult.loser.id}`).classList.add('lose');\r\n    }\r\n\r\n    /**\r\n     * @param {PlayerVO} pVO\r\n     * @param {boolean} isWarCard\r\n     */\r\n    #createCard(pVO, isWarCard = false) {\r\n        const index = this.#cards.length;\r\n        const config = new ElementConfig({\r\n            id: `game-card-${index}`,\r\n            options: { pVO: pVO, isWarCard: isWarCard },\r\n        });\r\n        const card = new Card(config).appendTo(this.querySelector(`#slot-card-${pVO.id}`));\r\n        this.#cards.push(card);\r\n    }\r\n\r\n    /**\r\n     * @param {string} dir\r\n     * @param {number} fromIndex\r\n     * @returns {Promise[]}\r\n     */\r\n    #getCardAnimQueue(dir, fromIndex = 0) {\r\n        fromIndex = Math.max(fromIndex, 0);\r\n\r\n        const order = [];\r\n        const promises = [];\r\n\r\n        for (let i = fromIndex; i < this.#cards.length; i++) {\r\n            const card = this.#cards[i];\r\n            if (dir === 'in') {\r\n                card.isUser ? order.unshift(card) : order.push(card);\r\n            } else {\r\n                if (card.player.id === this.#turnResult.winner.id) {\r\n                    card.animOutState = Constants.GAME.WIN;\r\n                    order.unshift(card);\r\n                } else {\r\n                    card.animOutState = Constants.GAME.LOSE;\r\n                    order.push(card);\r\n                }\r\n            }\r\n        }\r\n\r\n        order.forEach((card, index) => {\r\n            card.animIndex = index;\r\n            if (dir === 'in') {\r\n                card.animZIndex = index;\r\n                promises.push(card.animateIn());\r\n            } else {\r\n                promises.push(card.animateOut());\r\n            }\r\n        });\r\n\r\n        return promises;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    #destroyCards() {\r\n        this.#cards.forEach((card) => {\r\n            this.#destroyElement(card);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param {string} player\r\n     * @param {string} name\r\n     */\r\n    #createHud(player, name) {\r\n        const config = new ElementConfig({\r\n            id: `game-hud-${player}`,\r\n            options: { name: name, player: player },\r\n        });\r\n        const hud = new Hud(config);\r\n        this.#huds.push(hud);\r\n        return hud;\r\n    }\r\n\r\n    /**\r\n     * @param {string} player\r\n     * @param {number} value\r\n     * @param {boolean} reset\r\n     */\r\n    #updateHud(player, value, reset = false) {\r\n        this.#huds.find((hud) => {\r\n            if (hud.id === `game-hud-${player}`) hud.update(value);\r\n            if (reset) hud.classList.remove('animate-in');\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    #animateInHuds() {\r\n        this.#huds.forEach((hud) => hud.animateIn());\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    #animateOutHuds() {\r\n        this.#huds.forEach((hud) => hud.animateOut());\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    #displayError() {\r\n        this.#createOverlay(Constants.GAME.OVERLAY.GAME_OVER, Constants.GAME.ERROR);\r\n    }\r\n\r\n    /**\r\n     * @param {string} mode\r\n     * @param {string} state\r\n     * @param {Image} img\r\n     */\r\n    #createOverlay(mode, state, img) {\r\n        state = state ? state : this.#turnResult ? this.#turnResult.user.state : undefined;\r\n        const config = new ElementConfig({\r\n            id: `game-${mode}`,\r\n            options: { mode: mode, state: state, img: img },\r\n        });\r\n        return new Overlay(config).appendTo(this.querySelector('.game__stage'));\r\n    }\r\n\r\n    /**\r\n     * @param {boolean} state\r\n     */\r\n    #toggleDealButton(state) {\r\n        state\r\n            ? this.#btnDeal.classList.remove('is-disabled')\r\n            : this.#btnDeal.classList.add('is-disabled');\r\n    }\r\n\r\n    /**\r\n     * @param {boolean} state\r\n     */\r\n    #toggleLoader(state) {\r\n        const loader = this.querySelector('.loader__spinner');\r\n        state ? loader.classList.add('show') : loader.classList.remove('show');\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    #toggleHelp() {\r\n        if (this.#overlayHelp && this.#overlayHelp.isInAnimation) return;\r\n\r\n        if (!this.#overlayHelp) {\r\n            this.#btnHelp.innerText = 'X';\r\n            this.#overlayHelp = this.#createOverlay(Constants.GAME.OVERLAY.HELP);\r\n        } else {\r\n            this.#btnHelp.innerText = '?';\r\n            this.#overlayHelp.animateOut().then(() => {\r\n                this.#destroyElement(this.#overlayHelp);\r\n                this.#overlayHelp = undefined;\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {boolean} state\r\n     */\r\n    #toggleTooltip(state) {\r\n        if (state && !this.#tooltip) {\r\n            this.#tooltip = new Tooltip(\r\n                new TooltipConfig({\r\n                    mode: Tooltip.MODE_INFO,\r\n                    targetElement: this.#btnDeal,\r\n                    position: Tooltip.POSITION_TARGET,\r\n                    offsetX: this.#btnDeal.clientWidth * 0.5,\r\n                    offsetY: 20,\r\n                    msg: 'Click on your card stack<br>to start the next turn.',\r\n                })\r\n            );\r\n        } else if (this.#tooltip) {\r\n            this.#tooltip.destroy();\r\n            this.#tooltip = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {boolean} state\r\n     */\r\n    #togglePiles(state) {\r\n        this.#piles.forEach((pile) =>\r\n            state ? pile.classList.remove('is-hidden') : pile.classList.add('is-hidden')\r\n        );\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    #resetPiles() {\r\n        this.#piles.forEach((pile) => pile.classList.remove('lose'));\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    #resetGame() {\r\n        if (this.#timeout) clearTimeout(this.#timeout);\r\n\r\n        this.#animateOutHuds();\r\n\r\n        this.#destroyCards();\r\n\r\n        this.#toggleDealButton(false);\r\n\r\n        this.#togglePiles(false);\r\n        this.#resetPiles();\r\n\r\n        this.#destroyElement(this.#overlayWar);\r\n        this.#destroyElement(this.#overlayStart);\r\n        this.#destroyElement(this.#overlayGameOver);\r\n        this.#destroyElement(this.#overlayHelp);\r\n\r\n        this.#isWar = false;\r\n    }\r\n\r\n    /**\r\n     * @param {CustomElement} element\r\n     */\r\n    #destroyElement(element) {\r\n        if (element && element.destroy) element.destroy();\r\n    }\r\n}\r\n\r\n/**\r\n * @comment Register as custom html-element\r\n */\r\nwindow.customElements.define('component-game', Game);\r\n","module.exports = \"dbb1e982305b0da1\";","import { Constants } from '../../constants/constants';\r\n\r\nexport class ApiService {\r\n    /** @type {string} */\r\n    #deckID;\r\n\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor() {}\r\n\r\n    /**\r\n     * @param {number} count\r\n     * @returns {Promise}\r\n     */\r\n    async getNewDeck(count = 1) {\r\n        const data = await this.#doApiFetch(`/new/shuffle/?deck_count=${count}`);\r\n        this.#deckID = data.deck_id;\r\n    }\r\n\r\n    /**\r\n     * @param {number} count\r\n     * @param {string} position see Constants.API\r\n     * @returns {Promise}\r\n     */\r\n    drawFromDeck(count, position = Constants.API.DECK_TOP) {\r\n        return this.#doApiFetch(`/${this.#deckID}/draw/${position}?count=${count}`);\r\n    }\r\n\r\n    /**\r\n     * @param {string} pile\r\n     * @param {number} count\r\n     * @param {string} position\r\n     * @returns {Promise}\r\n     */\r\n    drawFromPile(pile, count = 1, position = Constants.API.DECK_BOTTOM) {\r\n        return this.#doApiFetch(`/${this.#deckID}/pile/${pile}/draw/${position}?count=${count}`);\r\n    }\r\n\r\n    /**\r\n     * @param {string} pile\r\n     * @param {string} cards\r\n     * @returns {Promise}\r\n     */\r\n    addToPile(pile, cardCodes) {\r\n        return this.#doApiFetch(`/${this.#deckID}/pile/${pile}/add/?cards=${cardCodes}`);\r\n    }\r\n\r\n    /**\r\n     * @param {string} cards\r\n     * @returns {string}\r\n     */\r\n    returnToDeck(cardCodes) {\r\n        return this.#doApiFetch(`/${this.#deckID}/return/?cards=${cardCodes}`);\r\n    }\r\n\r\n    /**\r\n     * @param {object[]} cards\r\n     * @returns {string}\r\n     */\r\n    getCardCodes(cards) {\r\n        return cards.map((card) => card.code).join(',');\r\n    }\r\n\r\n    /**\r\n     * @param {string} req\r\n     * @returns {Promise}\r\n     */\r\n    #doApiFetch(req) {\r\n        return new Promise((resolve, reject) => {\r\n            if (Constants.API.LOG) console.log('%c[API Call]' + req, 'color: grey');\r\n            fetch(Constants.API.BASE_URL + req, {\r\n                method: 'GET',\r\n            })\r\n                .then((res) => {\r\n                    if (!res.ok) {\r\n                        //console.error('%cGameService.#doApiFetch.error');\r\n                        reject(res.statusText);\r\n                    }\r\n                    return res.json();\r\n                })\r\n                .then((data) => {\r\n                    if (Constants.API.LOG) console.log('%c[API Data]', 'color: grey', data);\r\n                    resolve(data);\r\n                })\r\n                .catch((err) => {\r\n                    console.error('GameService.#doApiFetch.error');\r\n                    reject(err);\r\n                });\r\n        });\r\n    }\r\n}\r\n","export class CardVO {\r\n    /** @type {HTMLImageElement}*/\r\n    #imageElement;\r\n\r\n    /**\r\n     * @constructor\r\n     * @param {object} card\r\n     */\r\n    constructor(card) {\r\n        this.code;\r\n        this.image;\r\n        this.images = {\r\n            svg: '',\r\n            png: '',\r\n        };\r\n        this.suit;\r\n        this.value;\r\n        Object.assign(this, card);\r\n    }\r\n\r\n    /**\r\n     * @returns {HTMLImageElement}\r\n     */\r\n    get imageElement() {\r\n        return this.#imageElement;\r\n    }\r\n\r\n    /**\r\n     * @returns {number}\r\n     */\r\n    get valueByNumber() {\r\n        if (Number.isNaN(Number.parseInt(this.value))) {\r\n            switch (this.value.toUpperCase()) {\r\n                case 'JACK':\r\n                    return 11;\r\n                case 'QUEEN':\r\n                    return 12;\r\n                case 'KING':\r\n                    return 13;\r\n                case 'ACE':\r\n                    return 14;\r\n            }\r\n        } else {\r\n            return +this.value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns {Promise}\r\n     */\r\n    loadImage() {\r\n        return new Promise((resolve, reject) => {\r\n            this.#imageElement = new Image();\r\n            this.#imageElement.onload = () => {\r\n                resolve();\r\n            };\r\n            this.#imageElement.onerror = () => {\r\n                resolve();\r\n            };\r\n            this.#imageElement.src = this.images.png;\r\n        });\r\n    }\r\n}\r\n","import { Constants } from '../../constants/constants';\r\nimport { ApiService } from '../api/api-service';\r\nimport { CardVO } from './vo/card-vo';\r\nimport { PlayerVO } from './vo/player-vo';\r\n\r\nexport class GameService {\r\n    /** @type {ApiService}*/\r\n    #api;\r\n\r\n    /** @type {string} */\r\n    #devMode;\r\n\r\n    /** @type {object[]}*/\r\n    #resultQueue;\r\n\r\n    /** @type {CardVO[]}*/\r\n    #cardsInPlay;\r\n\r\n    /** @type {boolean} */\r\n    #isGameOver;\r\n\r\n    /** @type {boolean}*/\r\n    #turnPending;\r\n\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor(devMode) {\r\n        this.#devMode = devMode;\r\n        this.#api = new ApiService();\r\n    }\r\n\r\n    /**\r\n     * @returns {boolean}\r\n     */\r\n    get devMode() {\r\n        return this.#devMode === Constants.GAME.DEV_MODE;\r\n    }\r\n\r\n    /**\r\n     * @returns {Promise}\r\n     */\r\n    async setupNewGame() {\r\n        console.clear();\r\n        console.log('%cSetting up new game...', 'color: yellow');\r\n\r\n        this.#resultQueue = [];\r\n        this.#cardsInPlay = [];\r\n        this.#isGameOver = false;\r\n        this.#turnPending = false;\r\n\r\n        let testCardCodes;\r\n        let pileSize = Constants.GAME.START_PILE;\r\n        if (this.devMode) {\r\n            testCardCodes = {\r\n                //user: '8H,4C,9S,QC,8C',\r\n                //computer: '5C,4D,7S,QH,3H',\r\n                user: '8H,4C,9S,8C',\r\n                computer: '5C,4D,7S,KH',\r\n            };\r\n            pileSize = testCardCodes.user.split(',').length;\r\n        }\r\n\r\n        try {\r\n            await this.#api.getNewDeck();\r\n            await this.#setupStartHand(Constants.GAME.USER, testCardCodes);\r\n            await this.#setupStartHand(Constants.GAME.COMPUTER, testCardCodes);\r\n            console.log(\r\n                '%cConsole will always be 1 turn ahead of the interface,\\nsince the next turn is preloaded in the background.',\r\n                'color: yellow'\r\n            );\r\n            //Preload first turn\r\n            console.log('-------------------');\r\n            console.log('%cNext turn', 'color: yellow');\r\n            await this.#createTurn();\r\n            console.log('%cNew game ready', 'color: yellow');\r\n            return pileSize;\r\n        } catch (error) {\r\n            console.error('GameService.setupNewGame.error');\r\n            return Promise.reject(error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns {object}\r\n     */\r\n    async playTurn() {\r\n        if (this.#turnPending) return;\r\n\r\n        console.log('-------------------');\r\n        console.log('%cNext turn', 'color: yellow');\r\n\r\n        try {\r\n            //Check if result queue is empty\r\n            if (this.#resultQueue.length === 0) {\r\n                await this.#createTurn();\r\n            }\r\n            // Use first result in queue\r\n            const result = this.#resultQueue.shift();\r\n\r\n            //Preload next result\r\n            if (!this.#isGameOver) this.#createTurn();\r\n\r\n            return result;\r\n        } catch (error) {\r\n            return Promise.reject(error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {id}\r\n     * @param {object} testCardCodes\r\n     * @returns {Promise}\r\n     */\r\n    async #setupStartHand(id, testCardCodes = undefined) {\r\n        let apiData;\r\n        if (!testCardCodes) {\r\n            apiData = await this.#api.drawFromDeck(Constants.GAME.START_PILE);\r\n            await this.#api.addToPile(id, this.#api.getCardCodes(apiData.cards));\r\n        } else {\r\n            apiData = await this.#api.drawFromDeck(52);\r\n            const testCodes = testCardCodes[id];\r\n            let returnCodes = [];\r\n            for (const card of apiData.cards) {\r\n                if (!testCodes.split(',').includes(card.code)) {\r\n                    returnCodes.push(card.code);\r\n                }\r\n            }\r\n            await this.#api.addToPile(id, testCodes);\r\n            await this.#api.returnToDeck(returnCodes);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns {Promise}\r\n     */\r\n    async #createTurn() {\r\n        this.#turnPending = true;\r\n        try {\r\n            const user = new PlayerVO(Constants.GAME.USER);\r\n            const computer = new PlayerVO(Constants.GAME.COMPUTER);\r\n\r\n            await this.#drawCard(user);\r\n            await this.#drawCard(computer);\r\n\r\n            console.log('user.card: ' + user.card.valueByNumber);\r\n            console.log('computer.card: ' + computer.card.valueByNumber);\r\n\r\n            let isWar = false;\r\n            let winner;\r\n            let loser;\r\n\r\n            if (user.card.valueByNumber === computer.card.valueByNumber) {\r\n                console.log('%cWAR', 'color: red');\r\n                isWar = true;\r\n                user.state = computer.state = Constants.GAME.WAR;\r\n\r\n                await this.#drawCard(user, true);\r\n                await this.#drawCard(computer, true);\r\n\r\n                console.log('%cWar: ', 'color: red', user);\r\n                console.log('%cWar: ', 'color: red', computer);\r\n            } else {\r\n                if (user.card.valueByNumber > computer.card.valueByNumber) {\r\n                    winner = user;\r\n                    loser = computer;\r\n                } else {\r\n                    winner = computer;\r\n                    loser = user;\r\n                }\r\n\r\n                winner.state = Constants.GAME.WIN;\r\n                loser.state = Constants.GAME.LOSE;\r\n\r\n                await this.#awardCardsInPlay(winner);\r\n\r\n                console.log('%cWinner: ', 'color: lightgreen', winner);\r\n                console.log('%cLoser: ', 'color: red', loser);\r\n            }\r\n\r\n            const gameResult = this.#checkGameOver([user, computer]);\r\n            if (gameResult) {\r\n                winner = gameResult.winner;\r\n                loser = gameResult.loser;\r\n                await this.#awardCardsInPlay(winner);\r\n            }\r\n\r\n            const result = {\r\n                user: user,\r\n                computer: computer,\r\n                winner: winner,\r\n                loser: loser,\r\n                isWar: isWar,\r\n                isGameOver: this.#isGameOver,\r\n            };\r\n\r\n            this.#resultQueue.push(result);\r\n\r\n            this.#turnPending = false;\r\n        } catch (error) {\r\n            this.#turnPending = false;\r\n            console.error('%cGameService.#createTurn.error');\r\n            return Promise.reject(error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {PlayerVO} pVO\r\n     * @param {boolean} isWarCard\r\n     * @returns {Promise}\r\n     */\r\n    async #drawCard(pVO, isWarCard = false) {\r\n        const apiData = await this.#api.drawFromPile(pVO.id);\r\n        const card = new CardVO(apiData.cards[0]);\r\n        if (!isWarCard) {\r\n            await card.loadImage();\r\n            pVO.card = card;\r\n        }\r\n        this.#cardsInPlay.push(card);\r\n        pVO.remaining = apiData.piles[pVO.id].remaining;\r\n    }\r\n\r\n    /**\r\n     * @param {PlayerVO} pVO\r\n     * @returns {Promise}\r\n     */\r\n    async #awardCardsInPlay(pVO) {\r\n        if (this.#cardsInPlay.length > 0) {\r\n            console.log('Cards in play for winner: ', this.#cardsInPlay);\r\n            const apiData = await this.#api.addToPile(\r\n                pVO.id,\r\n                this.#api.getCardCodes(this.#cardsInPlay)\r\n            );\r\n            pVO.remaining = apiData.piles[pVO.id].remaining;\r\n            this.#cardsInPlay = [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns {object}\r\n     */\r\n    #checkGameOver(players) {\r\n        const loser = players.find((pVO) => pVO.remaining == 0);\r\n        let winner;\r\n        if (loser) {\r\n            loser.state = Constants.GAME.LOSE;\r\n            winner = players.find((pVO) => pVO.remaining != 0);\r\n            winner.state = Constants.GAME.WIN;\r\n            this.#isGameOver = true;\r\n\r\n            console.log('-------------------');\r\n            console.log('%cGame Over!', 'color: yellow');\r\n            console.log('%cWinner: ', 'color: lightgreen', winner);\r\n            console.log('%cLoser: ', 'color: red', loser);\r\n\r\n            return { winner: winner, loser: loser };\r\n        } else {\r\n            return;\r\n        }\r\n    }\r\n}\r\n","import { Game } from '../../components/game/game';\r\nimport { GameService } from '../services/game/game-service';\r\n\r\nexport class App {\r\n    /** @type {App} */\r\n    static #instance;\r\n\r\n    /**\r\n     * @returns {App} global instance of App\r\n     */\r\n    static get instance() {\r\n        if (!this.#instance) {\r\n            this.#instance = new App();\r\n        }\r\n        return this.#instance;\r\n    }\r\n\r\n    /** @type {GameService} */\r\n    #gameService;\r\n\r\n    /** @type {Game} */\r\n    #game;\r\n\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor() {}\r\n\r\n    /**\r\n     * @returns {GameService}\r\n     */\r\n    get gameService() {\r\n        return this.#gameService;\r\n    }\r\n\r\n    /**\r\n     * @returns {Game}\r\n     */\r\n    get game() {\r\n        return this.#game;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    run() {\r\n        const devMode = new URLSearchParams(document.location.search).get('dev');\r\n\r\n        this.#gameService = new GameService(devMode);\r\n\r\n        this.#game = new Game();\r\n        document.querySelector('main').appendChild(this.#game);\r\n        this.#game.render();\r\n    }\r\n}\r\n","import { App } from './core/app/app';\r\n\r\nApp.instance.run();\r\n"],"names":["$18c11f3350a906ea$export$6503ec6e8aabbaf","$18c11f3350a906ea$export$f7ad0328861e2f03","$18c11f3350a906ea$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","module","exports","URL","parcelRequire","resolve","import","meta","url","toString","register","JSON","parse","$130e4b16319a87dd$export$a002182e51710d39","static","USER","COMPUTER","WIN","LOSE","WAR","ERROR","START_PILE","OVERLAY","START","GAME_OVER","HELP","DEV_MODE","BASE_URL","DECK_TOP","DECK_BOTTOM","DECK_RANDOM","LOG","$72cb059bb856da45$export$763ea9d89dbce745","classList","constructor","init","this","options","populate","value","split","$abba8693dfd4ae5f$export$e38207f28c74982d","HTMLElement","config","super","validateConfig","populateFromConfig","defaults","render","htmlString","innerHTML","appendTo","element","append","$bb42ebca7b7678a0$export$c05af758d9b62120","card","ramaining","state","$20320072b7981501$export$28c660c63b792dea","arrowHeight","targetElement","globalPosition","rectTarget","getBoundingClientRect","left","window","scrollX","offsetX","top","scrollY","offsetY","offsetHeight","msg","add","mode","position","POSITION_GLOBAL","document","body","appendChild","style","offsetLeft","offsetWidth","clientWidth","marginLeft","$fcfae3b98776241c$export$d8b5cdb5205beabc","MODE_INFO","$cefc4531f48cd2f0$export$60332b2344f7fe41","animIndex","animOutState","animZIndex","player","pVO","isUser","GAME","isWarCard","$parcel$interopDefault","img","imageElement","querySelector","animateIn","animate","dir","delayFactor","push","$0980b101af88566d$export$3df3c878e47daeb9","name","update","remainingCards","$c8dcf87b805bac3d$export$c6fdb837b070b4ff","displayTime","isInAnimation","renderStart","renderWar","renderGameOver","renderHelp","setupNewGameButton","$57b85840160d0acf$export$985739bfa5723e08","cards","huds","piles","btnDeal","btnHelp","overlayStart","overlayWar","overlayGameOver","overlayHelp","turnResult","timeout","isWar","tooltip","firstRun","warImage","createHud","prependTo","setupDealButton","toggleDealButton","setupHelpButton","Image","src","createOverlay","newGame","toggleLoader","resetGame","$8749b53f6ce1d40a$export$86fbec116b87613f","instance","gameService","setupNewGame","then","pileSize","gameReady","catch","error","console","displayError","updateHud","togglePiles","toggleTooltip","addEventListener","playTurn","result","drawTurnResult","toggleHelp","createCard","user","computer","turnAnimIn","all","getCardAnimQueue","turnAnimInDone","displayWar","turnAnimOut","setTimeout","animateOut","destroyElement","numCards","checkRemaining","remaining","Promise","warGameOver","isGameOver","gameOver","turnAnimOutDone","destroyCards","highlightLoserPile","loser","index","fromIndex","Math","max","order","promises","card1","unshift","winner","forEach","config1","hud","player1","reset","find","remove","animateOutHuds","state1","undefined","config2","$7ee73f43de181479$export$ae14c375fc93363","deckID","async","count","data","doApiFetch","deck_id","drawFromDeck","API","pile","cardCodes","$0ac6671818a68af8$export$7e4b2a3baa1d4ac5","code","image","images","svg","png","suit","assign","Number","isNaN","parseInt","toUpperCase","reject","onload","$9781d5e675d91a8d$export$76299a8db1a98dcd","api","devMode","resultQueue","cardsInPlay","turnPending","clear","log","testCardCodes","getNewDeck","setupStartHand","createTurn","shift","apiData","testCodes","returnCodes","includes","addToPile","returnToDeck","getCardCodes","drawCard","valueByNumber","awardCardsInPlay","gameResult","checkGameOver","apiData1","drawFromPile","loadImage","pVO1","apiData2","game","run"],"version":3,"file":"index.06dfb190.js.map"}