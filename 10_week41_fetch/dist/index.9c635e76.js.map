{"mappings":"AAAO,MAAMA,EAETC,gBAAkB,sCAGlBA,gBAAkB,GAGlBA,mBAAqB,UAGrBA,mBAAqB,UAGrBC,GAYIC,cAAa,CAUbC,iBAAaC,EAAY,GAC5B,MAAAC,QAAAC,MAAAC,EAAA,4BAAAH,KAEDE,MAAAL,EAAAI,EAAAG,O,CAqBAC,aAAAL,EAAAM,EAAAX,EAICY,UACG,OAAOL,MAAIC,EAAS,IAAOD,MAAEL,UAAWS,WAAAN,I,cAWzBQ,EAAIR,EAAKM,EAAAX,EAAAY,U,aACZJ,EAAY,IAAAD,MAAAL,UAA6BW,UAAQF,WAAAN,I,CAW7DS,UAAOD,EAASE,GACnB,OAAAR,MAAAC,EAAA,IAAAD,MAAAL,UAAAW,gBAAAN,MAAAS,EAAAD,KACJ,C,kTC1FM,MAAME,EACTd,YAAYe,GACRX,KAAKY,KACLZ,KAAKa,MACLb,KAAKc,OAAS,CACVC,IAAK,GACLC,IAAK,IAEThB,KAAKiB,KACLjB,KAAKkB,MACLC,OAAOC,OAAOpB,KAAMW,E,CASZU,oB,WACIC,MAASC,OAACC,SAAAxB,KAAAkB,QAY7B,OAAAK,OAAAC,SAAAxB,KAAAkB,OAZ6B,OAAAlB,KAAAkB,MAAAO,eACd,IAAK,OACD,OAAO,GACX,IAAK,QACD,OAAO,GACX,IAAK,OACD,OAAO,GACd,UAED,OAAO,G,EC7BZ,MAAMC,EAQL9B,YAAKe,GACRX,KAAAW,OACJX,KAAA2B,e,iBCNM,MAAMC,EAETlC,mBAAqB,cAGrBA,uBAAyB,kBAGzBA,iBAAmB,YAGnBA,kBAAoB,aAGpBA,iBAAmB,YAGnBmC,GAOCjC,cAEDI,MAAA8B,G,CAWIA,K,MACID,EAAM,IAAUpC,C,CAIhBI,qB,UAEAG,MAAQ6B,EAAME,mBACjB/B,MAAAgC,EAAAJ,EAAAK,mBACJjC,MAAAgC,EAAAJ,EAAAM,iBAEDC,QAAAC,IAAA,iBAQI,CAHA,MAAMC,GACNF,QAAME,MAAWA,EAEjB,CA+BJ,CAOCxC,kBACDsC,QAAAC,IAAA,cAIiBpC,MAAAsC,EAAgBV,EAAiBK,aAC9BjC,MAAAsC,EAAsBV,EAAQM,gB,wLCtG/C,MAAMK,EAET7C,SASe8C,sBAGf,OAFCxC,MAAAwC,IAAAxC,MAAAwC,EAAA,IAAAD,GAEDvC,MAAAwC,CAGA,CAKAC,GAOA7C,cAAA,CAUQ6C,kBACP,OAAAzC,MAAAyC,CACJ,C,6NCzCDF,EAAIC,SAASE","sources":["src/js/core/services/api/api-service.js","src/js/core/services/game/card/card-vo.js","src/js/core/services/game/player/player-vo.js","src/js/core/services/game/game-service.js","src/js/core/app/app.js","src/js/main.js"],"sourcesContent":["export class ApiService {\r\n    /** @type {string} */\r\n    static BASE_URL = 'https://deckofcardsapi.com/api/deck';\r\n\r\n    /** @type {string} */\r\n    static DECK_TOP = '';\r\n\r\n    /** @type {string} */\r\n    static DECK_BOTTOM = 'bottom/';\r\n\r\n    /** @type {string} */\r\n    static DECK_RANDOM = 'random/';\r\n\r\n    /** @type {string} */\r\n    #deckID;\r\n\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor() {}\r\n\r\n    /**\r\n     * @param {number} count\r\n     * @returns {Promise}\r\n     */\r\n    async getNewDeck(count = 1) {\r\n        const data = await this.#doApiFetch(`/new/shuffle/?deck_count=${count}`);\r\n        this.#deckID = data.deck_id;\r\n    }\r\n\r\n    /**\r\n     * @param {number} count\r\n     * @param {string} position DECK_TOP (default), DECK_BOTTOM, DECK_RANDOM\r\n     * @returns {Promise}\r\n     */\r\n    drawFromDeck(count, position = ApiService.DECK_TOP) {\r\n        return this.#doApiFetch(`/${this.#deckID}/draw/${position}?count=${count}`);\r\n    }\r\n\r\n    /**\r\n     * @param {string} pile\r\n     * @param {number} count\r\n     * @param {string} position DECK_TOP (default), DECK_BOTTOM, DECK_RANDOM\r\n     * @returns {Promise}\r\n     */\r\n    drawFromPile(pile, count, position = ApiService.DECK_TOP) {\r\n        return this.#doApiFetch(`/${this.#deckID}/pile/${pile}/draw/${position}?count=${count}`);\r\n    }\r\n\r\n    /**\r\n     * @param {string} pile\r\n     * @param {object[]} cards\r\n     * @returns {Promise}\r\n     */\r\n    addToPile(pile, cards) {\r\n        return this.#doApiFetch(\r\n            `/${this.#deckID}/pile/${pile}/add/?cards=${this.#getCardCodes(cards)}`\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param {string} req\r\n     * @returns {Promise}\r\n     */\r\n    #doApiFetch(req) {\r\n        return new Promise((resolve, reject) => {\r\n            console.log('%c[API Call]' + req, 'color: grey');\r\n            fetch(ApiService.BASE_URL + req, {\r\n                method: 'GET',\r\n            })\r\n                .then((res) => {\r\n                    if (!res.ok) {\r\n                        throw new Error(res.statusText);\r\n                    }\r\n                    return res.json();\r\n                })\r\n                .then((data) => {\r\n                    console.log('%c[API Data]', 'color: grey', data);\r\n                    resolve(data);\r\n                })\r\n                .catch((err) => reject(err));\r\n        });\r\n    }\r\n    /**\r\n     * @param {object[]} cards\r\n     * @returns {string}\r\n     */\r\n    #getCardCodes(cards) {\r\n        return cards.map((card) => card.code).join(',');\r\n    }\r\n}\r\n","export class CardVO {\r\n    constructor(card) {\r\n        this.code;\r\n        this.image;\r\n        this.images = {\r\n            svg: '',\r\n            png: '',\r\n        };\r\n        this.suit;\r\n        this.value;\r\n        Object.assign(this, card);\r\n    }\r\n\r\n    /**\r\n     * @returns {number}\r\n     */\r\n    get valueByNumber() {\r\n        if (Number.isNaN(Number.parseInt(this.value))) {\r\n            switch (this.value.toUpperCase()) {\r\n                case 'JACK':\r\n                    return 11;\r\n                case 'QUEEN':\r\n                    return 12;\r\n                case 'KING':\r\n                    return 13;\r\n                case 'ACE':\r\n                    return 14;\r\n            }\r\n        } else {\r\n            return Number.parseInt(this.value);\r\n        }\r\n    }\r\n}\r\n","export class PlayerVO {\r\n    /**\r\n     * @constructor\r\n     * @param {CardVO} card\r\n     */\r\n    constructor(card) {\r\n        this.card = card;\r\n        this.ramainingCards;\r\n        this.roundState;\r\n    }\r\n}\r\n","import { ApiService } from '../api/api-service';\r\nimport { CardVO } from './card/card-vo';\r\nimport { PlayerVO } from './player/player-vo';\r\n\r\nexport class GameService {\r\n    /** @type {string} */\r\n    static PLAYER_USER = 'player_user';\r\n\r\n    /** @type {string} */\r\n    static PLAYER_COMPUTER = 'player_computer';\r\n\r\n    /** @type {string} */\r\n    static ROUND_WIN = 'round_win';\r\n\r\n    /** @type {string} */\r\n    static ROUND_LOSE = 'round_lose';\r\n\r\n    /** @type {string} */\r\n    static ROUND_WAR = 'round_war';\r\n\r\n    /** @type {ApiService}*/\r\n    #api;\r\n\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        this.#init();\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    #init() {\r\n        this.#api = new ApiService();\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    async setupNewGame() {\r\n        try {\r\n            await this.#api.getNewDeck();\r\n            await this.#setupStartHand(GameService.PLAYER_USER);\r\n            await this.#setupStartHand(GameService.PLAYER_COMPUTER);\r\n            console.log('New game ready');\r\n            //await this.playRound();\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns {object}\r\n     */\r\n    async playRound() {\r\n        console.log('Play round');\r\n        const user = this.#getPlayerRound(GameService.PLAYER_USER);\r\n        const computer = this.#getPlayerRound(GameService.PLAYER_COMPUTER);\r\n\r\n        /*\r\n\r\n        ROUND:\r\n\r\n        - Draw 1 card from each player's pile via api\r\n        - Create PlayerVO-ojects and populate with the card for each player\r\n        - Add the cards to a list of cards in play\r\n        - Determine round result (card with highest value)\r\n\r\n        if WIN or LOSE\r\n\r\n        - Set ROUND_WIN or ROUND_LOSE to each player's VO\r\n        - Update api and move all cards in play to winner's pile\r\n        - Set remaining cards to each player's VO\r\n        - Clear the cards in play list\r\n        - Declare war winner if previous round was ROUND_WAR\r\n        - Declare overall winner if other player has 0 cards\r\n        - Return result of round with each player's VO\r\n\r\n        else if WAR (draw)\r\n\r\n        - Set game service state to ROUND_WAR\r\n        - Set ROUND_WAR to each player\r\n        - Draw 1 extra card for each player (the ones facing down)\r\n        - Add the cards to the cards in play list\r\n        - Set remaining cards for each player\r\n        - Declare overall winner if other player has 0 cards\r\n        - Return result of round with each player's VO\r\n\r\n        */\r\n    }\r\n    /**\r\n     * @param {id} string\r\n     * @returns {PlayerVO}\r\n     */\r\n    async #getPlayerRound(id) {\r\n        const cards = await this.#api.drawFromPile(id, 1, ApiService.DECK_BOTTOM);\r\n        return new PlayerVO(new CardVO(cards.cards[0]));\r\n    }\r\n    /**\r\n     * @comment Draw half the deck and store in a pile for each player\r\n     */\r\n    async #setupStartHand(player) {\r\n        const data = await this.#api.drawFromDeck(26);\r\n        await this.#api.addToPile(player, data.cards);\r\n    }\r\n}\r\n","import { GameService } from '../services/game/game-service';\r\n\r\nexport class App {\r\n    /** @type {App} */\r\n    static #instance;\r\n\r\n    /**\r\n     * @returns {App} global instance of App\r\n     */\r\n    static get instance() {\r\n        if (!this.#instance) {\r\n            this.#instance = new App();\r\n        }\r\n        return this.#instance;\r\n    }\r\n\r\n    /** @type {GameService} */\r\n    #gameService;\r\n\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor() {}\r\n\r\n    /**\r\n     * @returns {GameService}\r\n     */\r\n    get gameService() {\r\n        return this.#gameService;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    run() {\r\n        document\r\n            .querySelector('main')\r\n            .insertAdjacentElement('afterbegin', document.createElement('h1')).innerHTML =\r\n            'Week 41 Lab 10 Fetch (Deck of Cards)';\r\n\r\n        this.#gameService = new GameService();\r\n        this.#gameService.setupNewGame().then(() => this.#gameService.playRound());\r\n    }\r\n}\r\n","import { App } from './core/app/app';\r\n\r\nApp.instance.run();\r\n"],"names":["$7ee73f43de181479$export$ae14c375fc93363","static","deckID","constructor","async","count","data","this","doApiFetch","deck_id","drawFromDeck","position","DECK_TOP","pile","addToPile","cards","getCardCodes","$e74a9dd0da9c6487$export$7e4b2a3baa1d4ac5","card","code","image","images","svg","png","suit","value","Object","assign","valueByNumber","isNaN","Number","parseInt","toUpperCase","$8944a6f3829db661$export$c05af758d9b62120","ramainingCards","$9781d5e675d91a8d$export$76299a8db1a98dcd","api","init","getNewDeck","setupStartHand","PLAYER_USER","PLAYER_COMPUTER","console","log","error","getPlayerRound","$8749b53f6ce1d40a$export$86fbec116b87613f","instance","gameService","run"],"version":3,"file":"index.9c635e76.js.map"}