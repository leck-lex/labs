{"mappings":"AAAO,MAAMA,EAETC,YAAc,CACVC,KAAM,cACNC,SAAU,cACVC,IAAK,MACLC,KAAM,OACNC,IAAK,OAITL,WAAa,CACTM,SAAU,sCACVC,SAAU,GACVC,YAAa,UACbC,YAAa,WCbd,MAAMC,EAETC,GAYIC,cAAa,CAUbC,iBAAaC,EAAY,GAC5B,MAAAC,QAAAC,MAAAC,EAAA,4BAAAH,KAEDE,MAAAL,EAAAI,EAAAG,O,CAqBAC,aAAAL,EAAAM,EAAArB,EAICsB,IAAAd,UACG,OAAOS,MAAIC,EAAS,IAAOD,MAAEL,UAAWS,WAAAN,I,cAWzBQ,EAAIR,EAAK,EAAAM,EAAArB,EAAAsB,IAAAb,a,aACZS,EAAY,IAAAD,MAAAL,UAA6BW,UAAQF,WAAAN,I,CAW7DS,UAAOD,EAASE,GACnB,OAAAR,MAAAC,EAAA,IAAAD,MAAAL,UAAAW,gBAAAN,MAAAS,EAAAD,KACJ,C,sTChFM,MAAME,EAQLd,YAAWe,G,KACPC,K,KACAC,M,KACFC,OAAA,CACEC,IAAK,GACLC,IAAC,IAERhB,KAAAiB,KAEDjB,KAAAkB,MAIIC,OAAIC,OAAOpB,KAAMW,E,yBAMTU,OAAKC,MAAMD,OAAAE,SAAAvB,KAAAkB,Q,kBAAA,OAAAlB,KAAAkB,MAAAM,e,IACP,OACJ,OAAU,G,IACN,QACP,U,IAED,OAEP,UACJ,U,YCpCM,MAAMC,EAQL7B,YAAK8B,GACL1B,KAAK0B,GAAKA,EACV1B,KAAKW,KACRX,KAAA2B,UACJ3B,KAAA4B,M,eCPM,MAAMC,EAETC,GAGAC,GAAe,GAOdnC,cAEDI,MAAAgC,G,CAYIA,K,MACIF,EAAM,IAAUpC,C,gCAOvBM,MAAA8B,EAAAG,mBAEDjC,MAAAkC,EAGAnD,EAAkBoD,KAAAlD,YACNe,MAAIkC,EAAcnD,EAAAoD,KAAAjD,UAEtBkD,QAAAC,IAAA,iB,OACAC,GACAF,QAAME,MAAQA,E,4BAQVD,IAAI,c,UAEJE,QAAYvC,MAAQwC,EAAU,IAACf,EAAA1C,EAAAoD,KAAAlD,OAClCwD,QAAMzC,MAAAwC,EAAA,IAAAf,EAAA1C,EAAAoD,KAAAjD,W,QACHmD,IAAA,cAAaE,EAAA5B,KAAA+B,e,QACbL,IAAQ,kBAAkBI,EAAA9B,KAAA+B,eAC1BH,EAAI5B,KAAK+B,gBAAkBD,EAAG9B,KAAS+B,e,QAEnCL,IAAQ,O,EACXT,MAAMa,EAAAb,MAAA7C,EAAAoD,KAAA9C,UACHW,MAAKwC,EAAQD,SACbvC,MAAAwC,EAAiBC,KAIzBL,QAAYC,IAAA,cACJE,EAAI5B,KAAA+B,cAAsBD,EAAC9B,KAAA+B,eAC9BH,EAAOX,MAAA7C,EAAAoD,KAAAhD,IACJsD,EAAMb,MAAO7C,EAAAoD,KAAA/C,OAGzBmD,EAAAX,MAAA7C,EAAAoD,KAAA/C,KAiCJqD,EAAAb,MAAA7C,EAG0BoD,KAAAhD,MAGzBiD,QAAAC,IAAA,SAAAE,GAEDH,QAAAC,IAAA,YAAAI,EAOI,CAFA,MAAMH,GACNF,QAAUE,MAAOA,EACjB,C,6PC5HD,MAAMK,EAET3D,SASe4D,sBAGf,OAFC5C,MAAA4C,IAAA5C,MAAA4C,EAAA,IAAAD,GAED3C,MAAA4C,CAGA,CAKAC,GAOAjD,cAAA,CAWIiD,kBACA,OAAM7C,MAAA6C,C,gBAKGC,cAAa,QAAAC,sBAA2B,aAAoBC,SAAQC,cAAA,OAAAC,UAAA,uC,MAC1EL,EAAA,IAAAhB,EAGH,MAAMsB,EAAWH,SAASC,cAAc,UACxCE,EAASC,UAAM,eACfD,EAASE,UAASC,IAAG,kBACrBH,EAASI,iBAAc,cACvBC,EAASC,UAAe,EACxBzD,MAAS6C,EAAAa,eAA0BC,MAAM,IAAMH,EAAAC,UAAqB,GAAI,IAE3ET,SAAAF,cAAA,QAAAc,YAAAT,GACJ,MAAAK,EAAAR,SAAAC,cAAA,U,4MC1DDN,EAAIC,SAASiB","sources":["src/js/core/constants/constants.js","src/js/core/services/api/api-service.js","src/js/core/services/game/vo/card-vo.js","src/js/core/services/game/vo/player-vo.js","src/js/core/services/game/game-service.js","src/js/core/app/app.js","src/js/main.js"],"sourcesContent":["export class Constants {\r\n    /** @type {object} */\r\n    static GAME = {\r\n        USER: 'plsyer_user',\r\n        COMPUTER: 'player_wopr',\r\n        WIN: 'win',\r\n        LOSE: 'lose',\r\n        WAR: 'war',\r\n    };\r\n\r\n    /** @type {object} */\r\n    static API = {\r\n        BASE_URL: 'https://deckofcardsapi.com/api/deck',\r\n        DECK_TOP: '',\r\n        DECK_BOTTOM: 'bottom/',\r\n        DECK_RANDOM: 'random/',\r\n    };\r\n}\r\n","import { Constants } from '../../constants/constants';\r\n\r\nexport class ApiService {\r\n    /** @type {string} */\r\n    #deckID;\r\n\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor() {}\r\n\r\n    /**\r\n     * @param {number} count\r\n     * @returns {Promise}\r\n     */\r\n    async getNewDeck(count = 1) {\r\n        const data = await this.#doApiFetch(`/new/shuffle/?deck_count=${count}`);\r\n        this.#deckID = data.deck_id;\r\n    }\r\n\r\n    /**\r\n     * @param {number} count\r\n     * @param {string} position DECK_TOP (default), DECK_BOTTOM, DECK_RANDOM\r\n     * @returns {Promise}\r\n     */\r\n    drawFromDeck(count, position = Constants.API.DECK_TOP) {\r\n        return this.#doApiFetch(`/${this.#deckID}/draw/${position}?count=${count}`);\r\n    }\r\n\r\n    /**\r\n     * @param {string} pile\r\n     * @param {number} count\r\n     * @param {string} position DECK_TOP (default), DECK_BOTTOM, DECK_RANDOM\r\n     * @returns {Promise}\r\n     */\r\n    drawFromPile(pile, count = 1, position = Constants.API.DECK_BOTTOM) {\r\n        return this.#doApiFetch(`/${this.#deckID}/pile/${pile}/draw/${position}?count=${count}`);\r\n    }\r\n\r\n    /**\r\n     * @param {string} pile\r\n     * @param {object[]} cards\r\n     * @returns {Promise}\r\n     */\r\n    addToPile(pile, cards) {\r\n        return this.#doApiFetch(\r\n            `/${this.#deckID}/pile/${pile}/add/?cards=${this.#getCardCodes(cards)}`\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param {string} req\r\n     * @returns {Promise}\r\n     */\r\n    #doApiFetch(req) {\r\n        return new Promise((resolve, reject) => {\r\n            console.log('%c[API Call]' + req, 'color: grey');\r\n            fetch(Constants.API.BASE_URL + req, {\r\n                method: 'GET',\r\n            })\r\n                .then((res) => {\r\n                    if (!res.ok) {\r\n                        throw new Error(res.statusText);\r\n                    }\r\n                    return res.json();\r\n                })\r\n                .then((data) => {\r\n                    console.log('%c[API Data]', 'color: grey', data);\r\n                    resolve(data);\r\n                })\r\n                .catch((err) => reject(err));\r\n        });\r\n    }\r\n    /**\r\n     * @param {object[]} cards\r\n     * @returns {string}\r\n     */\r\n    #getCardCodes(cards) {\r\n        return cards.map((card) => card.code).join(',');\r\n    }\r\n}\r\n","export class CardVO {\r\n    /**\r\n     * @constructor\r\n     * @param {object} card\r\n     */\r\n    constructor(card) {\r\n        this.code;\r\n        this.image;\r\n        this.images = {\r\n            svg: '',\r\n            png: '',\r\n        };\r\n        this.suit;\r\n        this.value;\r\n        Object.assign(this, card);\r\n    }\r\n\r\n    /**\r\n     * @returns {number}\r\n     */\r\n    get valueByNumber() {\r\n        if (Number.isNaN(Number.parseInt(this.value))) {\r\n            switch (this.value.toUpperCase()) {\r\n                case 'JACK':\r\n                    return 11;\r\n                case 'QUEEN':\r\n                    return 12;\r\n                case 'KING':\r\n                    return 13;\r\n                case 'ACE':\r\n                    return 14;\r\n            }\r\n        } else {\r\n            return +this.value;\r\n        }\r\n    }\r\n}\r\n","export class PlayerVO {\r\n    /**\r\n     * @constructor\r\n     * @param {string} id\r\n     */\r\n    constructor(id) {\r\n        this.id = id;\r\n        this.card;\r\n        this.ramaining;\r\n        this.state;\r\n        this.endState;\r\n    }\r\n}\r\n","import { Constants } from '../../constants/constants';\r\nimport { ApiService } from '../api/api-service';\r\nimport { CardVO } from './vo/card-vo';\r\nimport { PlayerVO } from './vo/player-vo';\r\n\r\nexport class GameService {\r\n    /** @type {ApiService}*/\r\n    #api;\r\n\r\n    /** @type {Card[]}*/\r\n    #cardsInPlay = [];\r\n\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        this.#init();\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    #init() {\r\n        this.#api = new ApiService();\r\n    }\r\n\r\n    /**\r\n     * @returns {Promise}\r\n     * @comment Draw half the deck and store in a pile for each player\r\n     */\r\n    async setupNewGame() {\r\n        try {\r\n            await this.#api.getNewDeck();\r\n            await this.#setupStartHand(Constants.GAME.USER);\r\n            await this.#setupStartHand(Constants.GAME.COMPUTER);\r\n            console.log('New game ready');\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns {object}\r\n     */\r\n    async playRound() {\r\n        console.log('Play round');\r\n\r\n        try {\r\n            const user = await this.#drawCard(new PlayerVO(Constants.GAME.USER));\r\n            const computer = await this.#drawCard(new PlayerVO(Constants.GAME.COMPUTER));\r\n\r\n            console.log('user.card: ' + user.card.valueByNumber);\r\n            console.log('computer.card: ' + computer.card.valueByNumber);\r\n\r\n            if (user.card.valueByNumber === computer.card.valueByNumber) {\r\n                // WAR\r\n                console.log('WAR');\r\n                user.state = computer.state = Constants.GAME.WAR;\r\n                await this.#drawCard(user);\r\n                await this.#drawCard(computer);\r\n            } else {\r\n                // WIN / LOSE\r\n                console.log('WIN / LOSE');\r\n                if (user.card.valueByNumber > computer.card.valueByNumber) {\r\n                    user.state = Constants.GAME.WIN;\r\n                    computer.state = Constants.GAME.LOSE;\r\n                } else {\r\n                    user.state = Constants.GAME.LOSE;\r\n                    computer.state = Constants.GAME.WIN;\r\n                }\r\n            }\r\n\r\n            console.log('user: ', user);\r\n            console.log('computer:', computer);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n\r\n        /*\r\n        TODO:\r\n\r\n        ROUND\r\n\r\n        x Draw 1 card from each player's pile via api. Return it as a CardVO (CardValueObject)\r\n        x Create a PlayerVO (PlayerValueObject) and populate with the card for each player\r\n        x Add the cards to a list of cards in play\r\n        x Determine round result (card with highest value or even)\r\n\r\n        if WIN / LOSE\r\n\r\n        x Set states WIN or LOSE to each PlayerVO\r\n        - Update api and move all cards in play to winner's pile\r\n        - Set remaining cards to each PlayerVO\r\n        - Clear the cards in play list\r\n        - Declare war winner if previous round was game service state WAR\r\n        - Declare overall winner if other player has 0 cards\r\n        - Return result of round with each PlayerVO\r\n\r\n        else if WAR (even)S\r\n\r\n        - Set game service state to WAR\r\n        x Set state WAR for each player\r\n        x Draw 1 extra card for each player (the cards facing down)\r\n        X Add the cards to the cards in play list\r\n        x Set remaining cards for each player\r\n        - Declare overall winner if other player has 0 cards\r\n        - Return result of round with each PlayerVO\r\n\r\n        */\r\n    }\r\n\r\n    /**\r\n     * @returns {Promise}\r\n     */\r\n    async #setupStartHand(id) {\r\n        const apiData = await this.#api.drawFromDeck(26);\r\n        await this.#api.addToPile(id, apiData.cards);\r\n    }\r\n\r\n    /**\r\n     * @param {PlayerVO} pVO\r\n     * @returns {PlayerVO}\r\n     */\r\n    async #drawCard(pVO) {\r\n        const apiData = await this.#api.drawFromPile(pVO.id);\r\n        const card = new CardVO(apiData.cards[0]);\r\n        if (pVO.state !== Constants.GAME.WAR) pVO.card = card;\r\n        this.#cardsInPlay.push(card);\r\n        pVO.remaining = apiData.piles[pVO.id].remaining;\r\n        return pVO;\r\n    }\r\n}\r\n","import { GameService } from '../services/game/game-service';\r\n\r\nexport class App {\r\n    /** @type {App} */\r\n    static #instance;\r\n\r\n    /**\r\n     * @returns {App} global instance of App\r\n     */\r\n    static get instance() {\r\n        if (!this.#instance) {\r\n            this.#instance = new App();\r\n        }\r\n        return this.#instance;\r\n    }\r\n\r\n    /** @type {GameService} */\r\n    #gameService;\r\n\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor() {}\r\n\r\n    /**\r\n     * @returns {GameService}\r\n     */\r\n    get gameService() {\r\n        return this.#gameService;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    run() {\r\n        document\r\n            .querySelector('main')\r\n            .insertAdjacentElement('afterbegin', document.createElement('h1')).innerHTML =\r\n            'Week 41 Lab 10 Fetch (Deck of Cards)';\r\n\r\n        this.#gameService = new GameService();\r\n\r\n        //Test buttons\r\n        const btnStart = document.createElement('button');\r\n        btnStart.innerText = 'Log New Game';\r\n        btnStart.classList.add('generic-button');\r\n        btnStart.addEventListener('click', () => {\r\n            btnRound.disabled = true;\r\n            this.#gameService.setupNewGame().then(() => (btnRound.disabled = false));\r\n        });\r\n        document.querySelector('main').appendChild(btnStart);\r\n\r\n        const btnRound = document.createElement('button');\r\n        btnRound.style.marginLeft = '10px';\r\n        btnRound.innerText = 'Log Play Round';\r\n        btnRound.classList.add('generic-button');\r\n        btnRound.disabled = true;\r\n        btnRound.addEventListener('click', () => this.#gameService.playRound());\r\n        document.querySelector('main').appendChild(btnRound);\r\n    }\r\n}\r\n","import { App } from './core/app/app';\r\n\r\nApp.instance.run();\r\n"],"names":["$130e4b16319a87dd$export$a002182e51710d39","static","USER","COMPUTER","WIN","LOSE","WAR","BASE_URL","DECK_TOP","DECK_BOTTOM","DECK_RANDOM","$7ee73f43de181479$export$ae14c375fc93363","deckID","constructor","async","count","data","this","doApiFetch","deck_id","drawFromDeck","position","API","pile","addToPile","cards","getCardCodes","$0ac6671818a68af8$export$7e4b2a3baa1d4ac5","card","code","image","images","svg","png","suit","value","Object","assign","Number","isNaN","parseInt","toUpperCase","$bb42ebca7b7678a0$export$c05af758d9b62120","id","ramaining","state","$9781d5e675d91a8d$export$76299a8db1a98dcd","api","cardsInPlay","init","getNewDeck","setupStartHand","GAME","console","log","error","user","drawCard","computer","valueByNumber","$8749b53f6ce1d40a$export$86fbec116b87613f","instance","gameService","querySelector","insertAdjacentElement","document","createElement","innerHTML","btnStart","innerText","classList","add","addEventListener","btnRound","disabled","setupNewGame","then","appendChild","run"],"version":3,"file":"index.3456b5cd.js.map"}