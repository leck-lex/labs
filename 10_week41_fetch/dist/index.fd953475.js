class e{static GAME={USER:"plsyer_user",COMPUTER:"player_wopr",WIN:"win",LOSE:"lose",WAR:"war"};static API={BASE_URL:"https://deckofcardsapi.com/api/deck",DECK_TOP:"",DECK_BOTTOM:"bottom/",DECK_RANDOM:"random/"}}class t{#e;constructor(){}async getNewDeck(e=1){const t=await this.#t(`/new/shuffle/?deck_count=${e}`);this.#e=t.deck_id}drawFromDeck(t,a=e.API.DECK_TOP){return this.#t(`/${this.#e}/draw/${a}?count=${t}`)}drawFromPile(t,a=1,r=e.API.DECK_BOTTOM){return this.#t(`/${this.#e}/pile/${t}/draw/${r}?count=${a}`)}addToPile(e,t){return this.#t(`/${this.#e}/pile/${e}/add/?cards=${this.#a(t)}`)}#t(t){return new Promise(((a,r)=>{console.log("%c[API Call]"+t,"color: grey"),fetch(e.API.BASE_URL+t,{method:"GET"}).then((e=>{if(!e.ok)throw new Error(e.statusText);return e.json()})).then((e=>{console.log("%c[API Data]","color: grey",e),a(e)})).catch((e=>r(e)))}))}#a(e){return e.map((e=>e.code)).join(",")}}class a{constructor(e){this.code,this.image,this.images={svg:"",png:""},this.suit,this.value,Object.assign(this,e)}get valueByNumber(){if(!Number.isNaN(Number.parseInt(this.value)))return+this.value;switch(this.value.toUpperCase()){case"JACK":return 11;case"QUEEN":return 12;case"KING":return 13;case"ACE":return 14}}}class r{constructor(e,t){this.id=e,this.card=t,this.ramaining,this.state,this.warCards=[],this.endState}}class s{#r;#s=[];constructor(){this.#i()}#i(){this.#r=new t}async setupNewGame(){try{await this.#r.getNewDeck(),await this.#n(e.GAME.USER),await this.#n(e.GAME.COMPUTER),console.log("New game ready")}catch(e){console.error(e)}}async playRound(){console.log("Play round");try{const t=await this.#c(e.GAME.USER),a=await this.#c(e.GAME.COMPUTER);console.log("user.card: "+t.card.valueByNumber),console.log("computer.card: "+a.card.valueByNumber),t.card.valueByNumber===a.card.valueByNumber?(console.log("WAR"),t.state=a.state=e.GAME.WAR,await this.#o(t),await this.#o(a)):(console.log("WIN / LOSE"),t.card.valueByNumber>a.card.valueByNumber?(t.state=e.GAME.WIN,a.state=e.GAME.LOSE):(t.state=e.GAME.LOSE,a.state=e.GAME.WIN)),console.log("user: ",t),console.log("computer:",a)}catch(e){console.error(e)}}async#n(e){const t=await this.#r.drawFromDeck(26);await this.#r.addToPile(e,t.cards)}async#c(e){const t=await this.#d(e),a=new r(e,t.card);return a.remaining=t.remaining,this.#s.push(t.card),a}async#o(e){const t=await this.#d(e.id);e.remaining=t.remaining,this.#s.push(t.card),e.warCards.push(t.card)}async#d(e){const t=await this.#r.drawFromPile(e);return{card:new a(t.cards[0]),remaining:t.piles[e].remaining}}}class i{static#l;static get instance(){return this.#l||(this.#l=new i),this.#l}#u;constructor(){}get gameService(){return this.#u}run(){document.querySelector("main").insertAdjacentElement("afterbegin",document.createElement("h1")).innerHTML="Week 41 Lab 10 Fetch (Deck of Cards)",this.#u=new s;const e=document.createElement("button");e.innerText="Log New Game",e.classList.add("generic-button"),e.addEventListener("click",(()=>{t.disabled=!0,this.#u.setupNewGame().then((()=>t.disabled=!1))})),document.querySelector("main").appendChild(e);const t=document.createElement("button");t.style.marginLeft="10px",t.innerText="Log Play Round",t.classList.add("generic-button"),t.disabled=!0,t.addEventListener("click",(()=>this.#u.playRound())),document.querySelector("main").appendChild(t)}}i.instance.run();
//# sourceMappingURL=index.fd953475.js.map
