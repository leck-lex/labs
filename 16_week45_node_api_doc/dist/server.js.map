{"mappings":"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","sources":["src/server/server.js","src/server/app/app.js","src/server/app/controllers/task-controller.js","src/server/app/models/task/task-model.js","src/server/app/models/task/task-schema.js"],"sourcesContent":["import mongoose from 'mongoose';\r\nimport { app } from './app/app.js';\r\n\r\nconst PORT = process.env.PORT || 7777;\r\nconst mongoURI = process.env.MONGO_URI;\r\n\r\napp.listen(PORT, () => console.log('Server is running on port: ' + PORT));\r\n\r\nmongoose.connect(mongoURI, (err) => {\r\n    if (err) {\r\n        console.error(err.message);\r\n        return;\r\n    }\r\n    console.log('Connected to DB');\r\n});\r\n","import express from 'express';\r\nimport cors from 'cors';\r\nimport path from 'path';\r\nimport { controller } from './controllers/task-controller.js';\r\n\r\nconst app = express();\r\n\r\napp.use(express.static(path.resolve('dist', 'public')));\r\napp.use(cors());\r\napp.use(express.json());\r\napp.use('/api/tasks', controller);\r\n\r\nexport { app };\r\n","import express from 'express';\r\nimport * as model from '../models/task/task-model.js';\r\n\r\nconst router = express.Router();\r\n\r\n/**\r\n * GET: /api/tasks\r\n */\r\nrouter.get('/', model.getAllTasks);\r\n\r\n/**\r\n * GET: /api/tasks/:id\r\n */\r\nrouter.get('/:id', model.getTaskById);\r\n\r\n/**\r\n * POST: /api/tasks\r\n */\r\nrouter.post('/', model.createTask);\r\n\r\n/**\r\n * PATCH: /api/tasks/:id\r\n */\r\nrouter.patch('/:id', model.updateTaskById);\r\n\r\n/**\r\n * DELETE: /api/tasks/:id\r\n */\r\nrouter.delete('/:id', model.deleteTaskById);\r\n\r\nexport { router as controller };\r\n","import { Task } from './task-schema.js';\r\n\r\n/**\r\n * @param {express.Request} req\r\n * @param {express.Response} res\r\n * @escription\r\n * - GET: /api/tasks\r\n * - Returns a list of all tasks.\r\n */\r\nconst getAllTasks = async (req, res) => {\r\n    try {\r\n        const tasks = await Task.find({});\r\n        res.status(200).json(tasks);\r\n    } catch (error) {\r\n        return res.status(500).json({\r\n            message: 'Could not get tasks.',\r\n        });\r\n    }\r\n};\r\n\r\n/**\r\n * @param {express.Request} req\r\n * @param {express.Response} res\r\n * @escription\r\n * - GET: /api/tasks/:id\r\n * - Returns a task by id.\r\n */\r\nconst getTaskById = async (req, res) => {\r\n    try {\r\n        const task = await Task.findById(req.params.id);\r\n        if (!task) {\r\n            return res.status(404).json({\r\n                message: 'Task not found.',\r\n            });\r\n        }\r\n        res.status(200).json(task);\r\n    } catch (err) {\r\n        return res.status(500).json({\r\n            message: 'Could not get task.',\r\n        });\r\n    }\r\n};\r\n\r\n/**\r\n * @param {express.Request} req\r\n * @param {express.Response} res\r\n * @description\r\n * - POST: /api/tasks\r\n * - Creates a new task.\r\n */\r\nconst createTask = async (req, res) => {\r\n    const { title } = req.body;\r\n\r\n    if (!title) {\r\n        return res.status(400).json({\r\n            message: 'Failed to create new task. The task has no title.',\r\n        });\r\n    }\r\n\r\n    try {\r\n        const task = await new Task({ title }).save();\r\n        res.status(201).json(task);\r\n    } catch (err) {\r\n        return res.status(500).json({\r\n            message: 'Failed to create new task.',\r\n        });\r\n    }\r\n};\r\n\r\n/**\r\n * @param {express.Request} req\r\n * @param {express.Response} res\r\n * @escription\r\n * - PATCH: /api/tasks/:id\r\n * - Updates a task by id.\r\n */\r\nconst updateTaskById = async (req, res) => {\r\n    try {\r\n        const { title, done } = req.body;\r\n        const task = await Task.findByIdAndUpdate(req.params.id, { title, done }, { new: true });\r\n        res.status(200).json(task);\r\n    } catch (err) {\r\n        return res.status(500).json({\r\n            message: 'Could not update task.',\r\n        });\r\n    }\r\n};\r\n\r\n/**\r\n * @param {express.Request} req\r\n * @param {express.Response} res\r\n * @escription\r\n * - DELETE: /api/tasks/:id\r\n * - Deletes a task by id.\r\n */\r\nconst deleteTaskById = async (req, res) => {\r\n    try {\r\n        const task = await Task.findByIdAndDelete(req.params.id);\r\n        res.status(200).json(task);\r\n    } catch (err) {\r\n        return res.status(500).json({\r\n            message: 'Could not delete task.',\r\n        });\r\n    }\r\n};\r\n\r\nexport { getAllTasks, getTaskById, createTask, updateTaskById, deleteTaskById };\r\n","import { model, Schema } from 'mongoose';\r\n\r\nconst Task = model(\r\n    'Task',\r\n    Schema(\r\n        {\r\n            title: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n            done: {\r\n                type: Boolean,\r\n                required: true,\r\n                default: false,\r\n            },\r\n        },\r\n        { timestamps: true }\r\n    )\r\n);\r\n\r\nexport { Task };\r\n"],"names":[],"version":3,"file":"server.js.map","sourceRoot":"../"}