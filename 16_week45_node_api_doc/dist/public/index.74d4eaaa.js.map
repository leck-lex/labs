{"mappings":"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","sources":["src/client/js/api/api-client.js","src/client/js/core/element/config/element-config.js","src/client/js/core/element/base-element.js","src/client/js/components/todo/events/list-item-event.js","src/client/js/components/loader/loader-spinner.js","src/client/js/components/todo/elements/header/todo-header.js","node_modules/@parcel/runtime-js/lib/bundles/runtime-316fdbe9d2681e11.js","src/client/js/components/todo/elements/list/todo-list-item.js","node_modules/@parcel/runtime-js/lib/bundles/runtime-6dc7dac14ccdee08.js","src/client/js/components/todo/elements/list/todo-list.js","src/client/js/components/todo/todo.js","src/client/js/core/app/app.js","src/client/js/main.js"],"sourcesContent":["export class ApiClient {\r\n    /** @type {string} */\r\n    static API_BASE_URL = 'api/tasks/';\r\n\r\n    /**\r\n     * @returns {Promise}\r\n     */\r\n    static async getAllItems() {\r\n        return await this.#request('GET');\r\n    }\r\n\r\n    /**\r\n     * @param {object} data\r\n     * @returns {Promise}\r\n     */\r\n    static async createItem(data) {\r\n        return await this.#request('POST', '', data);\r\n    }\r\n\r\n    /**\r\n     * @param {string} id\r\n     * @param {object} data\r\n     * @returns {Promise}\r\n     */\r\n    static async updateItem(id, data) {\r\n        return await this.#request('PATCH', id, data);\r\n    }\r\n\r\n    /**\r\n     * @param {string} id\r\n     * @returns {Promise}\r\n     */\r\n    static async deleteItem(id) {\r\n        return await this.#request('DELETE', id);\r\n    }\r\n\r\n    /**\r\n     * @param {string} method\r\n     * @param {string} path\r\n     * @param {object} data\r\n     * @returns {Promise}\r\n     */\r\n    static async #request(method, path = '', data = undefined) {\r\n        const options = {\r\n            method: method,\r\n        };\r\n        if (data) {\r\n            options.headers = {\r\n                'Content-Type': 'application/json',\r\n            };\r\n            options.body = JSON.stringify(data);\r\n        }\r\n        const res = await fetch(ApiClient.API_BASE_URL + path, options);\r\n        if (!res.ok) {\r\n            throw new Error(res.status + ' ' + res.statusText);\r\n        } else {\r\n            return res.json();\r\n        }\r\n    }\r\n}\r\n","export class ElementConfig {\r\n    /** @type {string[]}*/\r\n    #classList = [];\r\n    /**\r\n     * @constructor\r\n     * @param {object} init\r\n     */\r\n    constructor(init) {\r\n        this.id;\r\n        this.tag;\r\n        this.options;\r\n\r\n        this.populate(init);\r\n    }\r\n\r\n    /**\r\n     * @param {*} space-separated string or an array of class-names\r\n     */\r\n    set classList(value) {\r\n        if (typeof value === 'string') {\r\n            value = value.split(' ');\r\n        }\r\n        this.#classList = [...this.#classList, ...value];\r\n    }\r\n    /**\r\n     * @returns {string[]}\r\n     */\r\n    get classList() {\r\n        return this.#classList;\r\n    }\r\n    /**\r\n     * @param {object} init\r\n     */\r\n    populate(init) {\r\n        if (init) Object.assign(this, init);\r\n    }\r\n}\r\n","import { ElementConfig } from './config/element-config';\r\n\r\nexport class BaseElement {\r\n    /** @type {ElementConfig} */\r\n    #config;\r\n\r\n    /** @type {HTMLElement} */\r\n    #element;\r\n\r\n    /**\r\n     * @constructor\r\n     * @param {ElementConfig} config optional\r\n     */\r\n    constructor(config) {\r\n        this.config = config || new ElementConfig();\r\n        this.validateConfig();\r\n        this.populateFromConfig();\r\n    }\r\n\r\n    /**\r\n     * @param {string}\r\n     */\r\n    set id(value) {\r\n        this.element.id = value;\r\n    }\r\n\r\n    /**\r\n     * @returns {HTMLElement}\r\n     */\r\n    get id() {\r\n        return this.element.id;\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLElement}\r\n     */\r\n    set element(el) {\r\n        this.#element = el;\r\n    }\r\n\r\n    /**\r\n     * @returns {HTMLElement}\r\n     */\r\n    get element() {\r\n        return this.#element;\r\n    }\r\n\r\n    /**\r\n     * @param {ElementConfig} config\r\n     */\r\n    set config(config) {\r\n        this.#config = config;\r\n    }\r\n\r\n    /**\r\n     * @returns {ElementConfig}\r\n     */\r\n    get config() {\r\n        return this.#config;\r\n    }\r\n\r\n    /**\r\n     * @returns {object}\r\n     * @comment Override this getter to register default component id and classlist if needed\r\n     */\r\n    get defaults() {\r\n        return { tag: 'div', id: '', classList: '' };\r\n    }\r\n\r\n    /**\r\n     * @param {string} htmlString\r\n     */\r\n    render(htmlString) {\r\n        this.element.innerHTML = htmlString;\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLElement} element\r\n     * @returns {CustomElement}\r\n     */\r\n    appendTo(el) {\r\n        el.appendChild(this.element);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLElement} element\r\n     * @returns {CustomElement}\r\n     */\r\n    prependTo(el) {\r\n        element.prependChild(this.element);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    validateConfig() {\r\n        this.config.tag = this.config.tag || this.defaults.tag;\r\n        this.config.id = this.config.id || this.defaults.id;\r\n        this.config.classList = this.defaults.classList;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    populateFromConfig() {\r\n        this.element = document.createElement(this.config.tag);\r\n        this.id = this.config.id;\r\n        this.element.classList.add(...this.config.classList);\r\n    }\r\n    /**\r\n     *\r\n     */\r\n    destroy() {\r\n        this.element.remove();\r\n    }\r\n}\r\n","export class ListItemEvent extends CustomEvent {\r\n    /** @type {string} */\r\n    static UPDATE = 'item-update';\r\n\r\n    /** @type {string} */\r\n    static CREATE = 'item-create';\r\n\r\n    /** @type {string} */\r\n    static DELETE = 'item-delete';\r\n\r\n    /**\r\n     * @constructor\r\n     * @param {string} type\r\n     * @param {obejct} options\r\n     */\r\n    constructor(type, options) {\r\n        super(type, options);\r\n    }\r\n}\r\n","import { BaseElement } from '../../core/element/base-element.js';\r\n\r\nexport class LoaderSpinner extends BaseElement {\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.render();\r\n    }\r\n\r\n    /**\r\n     * @returns {object}\r\n     */\r\n    get defaults() {\r\n        return { tag: 'div', id: 'loader-spinner', classList: 'todo__header-loader' };\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    render() {\r\n        super.render(\r\n            '<svg class=\"loader__spinner\" viewBox=\"0 0 50 50\"><circle class=\"path\" cx=\"25\" cy=\"25\" r=\"20\" fill=\"none\" stroke-width=\"5\"></circle></svg>'\r\n        );\r\n    }\r\n    /**\r\n     *\r\n     */\r\n    show() {\r\n        this.element.querySelector('.loader__spinner').classList.add('show');\r\n    }\r\n\r\n    /**\r\n     * @param {number} delay\r\n     */\r\n    hide(delay = 0) {\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                this.element.querySelector('.loader__spinner').classList.remove('show');\r\n                resolve();\r\n            }, delay);\r\n        });\r\n    }\r\n}\r\n","import template from 'bundle-text:../../../../../templates/todo/todo-header.html';\r\nimport { BaseElement } from '../../../../core/element/base-element.js';\r\nimport { LoaderSpinner } from '../../../loader/loader-spinner.js';\r\nimport { ListItemEvent } from '../../events/list-item-event.js';\r\n\r\nexport class TodoHeader extends BaseElement {\r\n    /** @type {LoaderSpinner} */\r\n    #loader;\r\n\r\n    /** @type {HTMLButtonElement} */\r\n    #btnCreate;\r\n\r\n    /** @type {HTMLButtonElement} */\r\n    #btnSave;\r\n\r\n    /** @type {HTMLFormElement} */\r\n    #form;\r\n\r\n    /** @type {HTMLInputElement} */\r\n    #input;\r\n\r\n    /** @type {HTMLHeadingElement} */\r\n    #heading;\r\n\r\n    /** @type {boolean} */\r\n    #isOpen = false;\r\n\r\n    /** @type {number} */\r\n    #focusTimeout;\r\n\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.render();\r\n    }\r\n\r\n    /**\r\n     * @returns {object}\r\n     */\r\n    get defaults() {\r\n        return { tag: 'header', id: 'todo-header', classList: 'todo__header' };\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    render() {\r\n        super.render(template);\r\n\r\n        this.#form = this.element.querySelector('form');\r\n        this.#form.addEventListener('submit', (event) => {\r\n            event.preventDefault();\r\n            this.#dispatchCreateEvent();\r\n        });\r\n\r\n        this.#input = this.element.querySelector('input');\r\n\r\n        this.#btnCreate = this.element.querySelector('.todo__header-btn-create');\r\n        this.#btnCreate.addEventListener('click', () => this.#toggleInput());\r\n\r\n        this.#btnSave = this.element.querySelector('.todo__header-btn-save');\r\n        this.#btnSave.addEventListener('click', () => this.#form.requestSubmit());\r\n\r\n        this.#heading = this.element.querySelector('.todo__header-heading');\r\n\r\n        this.#loader = new LoaderSpinner().appendTo(this.element);\r\n        this.#loader.show();\r\n\r\n        document.addEventListener('click', (event) => {\r\n            if (!event.composedPath().includes(this.element) && this.#isOpen) this.#toggleInput();\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    enable() {\r\n        this.#loader.hide(500).then(() => this.#btnCreate.classList.add('show'));\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    #dispatchCreateEvent() {\r\n        const event = new ListItemEvent(ListItemEvent.CREATE, {\r\n            detail: { title: this.#input.value, done: false },\r\n        });\r\n        document.dispatchEvent(event);\r\n\r\n        this.#input.value = '';\r\n        this.#toggleInput();\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    #toggleInput() {\r\n        this.#isOpen = !this.#isOpen;\r\n        if (this.#isOpen) {\r\n            this.#btnCreate.setAttribute('title', 'Cancel');\r\n            this.#focusTimeout = setTimeout(() => {\r\n                this.#input.focus();\r\n            }, 300);\r\n        } else {\r\n            this.#btnCreate.setAttribute('title', 'Add task');\r\n            clearTimeout(this.#focusTimeout);\r\n        }\r\n\r\n        this.#input.classList.toggle('show');\r\n        this.#btnCreate.classList.toggle('mode-cancel');\r\n        this.#btnSave.classList.toggle('show');\r\n        this.#heading.classList.toggle('hide');\r\n    }\r\n}\r\n","module.exports = \"9832a180cf14df72\";","import template from 'bundle-text:../../../../../templates/todo/todo-list-item.html';\r\nimport { BaseElement } from '../../../../core/element/base-element';\r\nimport { ListItemEvent } from '../../events/list-item-event';\r\n\r\nexport class TodoListItem extends BaseElement {\r\n    /** @type {boolean} */\r\n    #done;\r\n\r\n    /** @type {HTMLFormElement} */\r\n    #form;\r\n\r\n    /** @type {HTMLInputElement} */\r\n    #title;\r\n\r\n    /** @type {HTMLElement} */\r\n    #check;\r\n\r\n    /** @type {HTMLElement} */\r\n    #menu;\r\n\r\n    /** @type {HTMLButtonElement} */\r\n    #btnMenu;\r\n\r\n    /** @type {HTMLButtonElement} */\r\n    #btnDelete;\r\n\r\n    /** @type {HTMLButtonElement} */\r\n    #btnSave;\r\n\r\n    /** @type {boolean} */\r\n    #isMenuOpen = false;\r\n\r\n    /** @type {boolean} */\r\n    #isSaved;\r\n\r\n    /** @type {string} */\r\n    #prevTitleValue;\r\n\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor(config) {\r\n        super(config);\r\n        this.render();\r\n    }\r\n\r\n    /**\r\n     * @returns {object}\r\n     */\r\n    get defaults() {\r\n        return { tag: 'li', id: 'todo-list-item', classList: 'todo__list-item' };\r\n    }\r\n\r\n    /**\r\n     * @param {string} value\r\n     */\r\n    set _id(value) {\r\n        this.id = value;\r\n    }\r\n\r\n    /**\r\n     * @param {string} value\r\n     */\r\n    set title(value) {\r\n        this.#title.value = value;\r\n    }\r\n\r\n    /**\r\n     * @returns {string}\r\n     */\r\n    get title() {\r\n        return this.#title.value;\r\n    }\r\n\r\n    /**\r\n     * @param {boolean} value\r\n     */\r\n    set done(value) {\r\n        this.#done = value;\r\n        this.#check.innerText = value ? 'check_circle_outline' : 'radio_button_unchecked';\r\n        this.#done ? this.#title.classList.add('done') : this.#title.classList.remove('done');\r\n    }\r\n\r\n    /**\r\n     * @returns {boolean}\r\n     */\r\n    get done() {\r\n        return this.#done;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    render() {\r\n        super.render(template);\r\n\r\n        const cPrefix = '.todo__list-item-';\r\n\r\n        this.#form = this.element.querySelector('form');\r\n        this.#form.addEventListener('submit', (event) => {\r\n            event.preventDefault();\r\n            this.#isSaved = true;\r\n            this.#toggleMenu();\r\n            this.#dispatchUpdateEvent({ title: this.title }, { title: this.#prevTitleValue });\r\n        });\r\n\r\n        this.#title = this.element.querySelector('input');\r\n\r\n        this.#check = this.element.querySelector(cPrefix + 'check');\r\n        this.#check.addEventListener('click', this);\r\n\r\n        this.#menu = this.element.querySelector(cPrefix + 'menu');\r\n\r\n        this.#btnMenu = this.element.querySelector(cPrefix + 'btn-menu');\r\n        this.#btnMenu.addEventListener('click', this);\r\n\r\n        this.#btnDelete = this.element.querySelector(cPrefix + 'btn-delete');\r\n        this.#btnDelete.addEventListener('click', this);\r\n\r\n        this.#btnSave = this.element.querySelector(cPrefix + 'btn-save');\r\n        this.#btnSave.addEventListener('click', this);\r\n\r\n        document.addEventListener('click', this.#handleDocumentClick.bind(this));\r\n    }\r\n\r\n    /**\r\n     * @param {object} data\r\n     */\r\n    populate(data) {\r\n        Object.assign(this, data);\r\n    }\r\n\r\n    /**\r\n     * @param {Event} event\r\n     */\r\n    handleEvent(event) {\r\n        switch (true) {\r\n            case event.target === this.#check:\r\n                this.#dispatchUpdateEvent({ done: !this.done }, { done: this.done });\r\n                break;\r\n            case event.target === this.#btnSave:\r\n                this.#form.requestSubmit();\r\n                break;\r\n            case event.target === this.#btnDelete:\r\n                this.#dispatchDeleteEvent();\r\n                break;\r\n            case event.target === this.#btnMenu:\r\n                this.#toggleMenu();\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {Event} event\r\n     */\r\n    #handleDocumentClick(event) {\r\n        if (!event.composedPath().includes(this.element) && this.#isMenuOpen) {\r\n            this.#toggleMenu();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    #toggleMenu() {\r\n        this.#isMenuOpen = !this.#isMenuOpen;\r\n        this.#title.disabled = !this.#isMenuOpen;\r\n\r\n        if (this.#isMenuOpen) {\r\n            this.#prevTitleValue = this.title;\r\n            this.#isSaved = false;\r\n            this.#title.focus();\r\n        } else if (!this.#isSaved) {\r\n            this.title = this.#prevTitleValue;\r\n        }\r\n\r\n        this.#menu.classList.toggle('show');\r\n        this.#btnMenu.classList.toggle('selected');\r\n    }\r\n\r\n    /**\r\n     * @param {object} props\r\n     */\r\n    #dispatchUpdateEvent(props, prevProps) {\r\n        const event = new ListItemEvent(ListItemEvent.UPDATE, {\r\n            detail: { id: this.id, props: props, prevProps: prevProps },\r\n        });\r\n        document.dispatchEvent(event);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    #dispatchDeleteEvent() {\r\n        const event = new ListItemEvent(ListItemEvent.DELETE, {\r\n            detail: this,\r\n        });\r\n        document.dispatchEvent(event);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    destroy() {\r\n        this.#check.removeEventListener('click', this);\r\n        this.#btnMenu.removeEventListener('click', this);\r\n        this.#btnDelete.removeEventListener('click', this);\r\n        this.#btnSave.removeEventListener('click', this);\r\n        document.removeEventListener('click', this.#handleDocumentClick.bind(this));\r\n        super.destroy();\r\n    }\r\n}\r\n","module.exports = \"c34fc5087924b286\";","import { BaseElement } from '../../../../core/element/base-element';\r\nimport { TodoListItem } from './todo-list-item';\r\n\r\nexport class TodoList extends BaseElement {\r\n    /** @type {TodoListItem[]} */\r\n    #items = [];\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @returns {object}\r\n     */\r\n    get defaults() {\r\n        return { tag: 'ul', id: 'todo-list', classList: 'todo__list' };\r\n    }\r\n\r\n    /**\r\n     * @param {objetct} data\r\n     * @returns {TodoListItem}\r\n     */\r\n    addItem(data) {\r\n        const item = new TodoListItem();\r\n        item.populate(data);\r\n        item.appendTo(this.element);\r\n        this.#items.push(item);\r\n        return item;\r\n    }\r\n\r\n    /**\r\n     * @param {string} id\r\n     * @param {object} props\r\n     */\r\n    updateItem(id, props) {\r\n        const item = this.#items.find((item) => item.id === id);\r\n        item.populate(props);\r\n    }\r\n\r\n    /**\r\n     * @param {string} id\r\n     * @param {object} props\r\n     */\r\n    deleteItem(id) {\r\n        const index = this.#items.findIndex((item) => item.id === id);\r\n        if (index !== -1) {\r\n            const item = this.#items.splice(index, 1)[0];\r\n            item.destroy();\r\n        }\r\n    }\r\n}\r\n","import { ApiClient } from '../../api/api-client.js';\r\nimport { BaseElement } from '../../core/element/base-element.js';\r\nimport { ListItemEvent } from './events/list-item-event.js';\r\nimport { TodoHeader } from './elements/header/todo-header.js';\r\nimport { TodoList } from './elements/list/todo-list.js';\r\n\r\nexport class Todo extends BaseElement {\r\n    /** @type {TodoHeader} */\r\n    #header;\r\n\r\n    /** @type {TodoList} */\r\n    #list;\r\n\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.render();\r\n    }\r\n\r\n    /**\r\n     * @returns {object}\r\n     */\r\n    get defaults() {\r\n        return { tag: 'div', id: 'todo', classList: 'todo' };\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    render() {\r\n        this.#header = new TodoHeader();\r\n        this.#header.appendTo(this.element);\r\n\r\n        this.#list = new TodoList();\r\n        this.#list.appendTo(this.element);\r\n\r\n        document.addEventListener(ListItemEvent.CREATE, (event) => this.#createItem(event.detail));\r\n\r\n        document.addEventListener(ListItemEvent.UPDATE, (event) =>\r\n            this.#updateItem(event.detail.id, event.detail.props, event.detail.prevProps)\r\n        );\r\n\r\n        document.addEventListener(ListItemEvent.DELETE, (event) => this.#deleteItem(event.detail));\r\n\r\n        ApiClient.getAllItems()\r\n            .then((data) => {\r\n                this.#header.enable();\r\n                this.#addListItems(data);\r\n            })\r\n            .catch((error) => console.error(error));\r\n    }\r\n\r\n    /**\r\n     * @param {object} data\r\n     */\r\n    #createItem(data) {\r\n        ApiClient.createItem(data)\r\n            .then((data) => this.#list.addItem(data))\r\n            .catch((error) => {\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * @param {string} id\r\n     * @param {object} props\r\n     */\r\n    #updateItem(id, props, prevProps) {\r\n        //Immediate visual update before server save\r\n        this.#list.updateItem(id, props);\r\n\r\n        ApiClient.updateItem(id, props).catch((error) => {\r\n            //Revert item's visual update if error from server\r\n            this.#list.updateItem(id, prevProps);\r\n            console.error(error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param {TodoListItem} item\r\n     */\r\n    #deleteItem(item) {\r\n        //Immediate visual update before server save\r\n        item.element.classList.add('hide');\r\n        ApiClient.deleteItem(item.id)\r\n            .then(() => this.#list.deleteItem(item.id))\r\n            .catch((error) => {\r\n                //Redraw item if error from server\r\n                item.element.classList.remove('hide');\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * @param {objetct[]} dataList\r\n     */\r\n    #addListItems(dataList) {\r\n        dataList.forEach((data) => this.#list.addItem(data));\r\n    }\r\n}\r\n","import { Todo } from '../../components/todo/todo.js';\r\n\r\nexport class App {\r\n    /** @type {App} */\r\n    static #instance;\r\n\r\n    /**\r\n     * @returns {App} global instance of App\r\n     */\r\n    static get instance() {\r\n        if (!this.#instance) {\r\n            this.#instance = new App();\r\n        }\r\n        return this.#instance;\r\n    }\r\n\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor() {}\r\n\r\n    /**\r\n     *\r\n     */\r\n    run() {\r\n        const todo = new Todo();\r\n        todo.appendTo(document.querySelector('main'));\r\n    }\r\n}\r\n","import { App } from './core/app/app';\r\n\r\nApp.instance.run();\r\n"],"names":["$b7ee0e372d3e0678$export$dc890958d2b428da","static","this","request","data","id","$fdbb8094601fa9ca$export$763ea9d89dbce745","classList","constructor","init","tag","options","populate","value","split","$d542a7cde3bfcd3e$export$a1a7283d3ef4b3a1","config","element","validateConfig","populateFromConfig","el","defaults","render","htmlString","innerHTML","$718e1cd8f8ab8481$export$f8c5f918787d3472","CustomEvent","$45ea43cb9120adb3$export$57a80cbf859d803c","super","querySelector","add","$4fe47e38657c6128$export$7dddc6c21deaacf0","loader","btnCreate","btnSave","form","input","heading","isOpen","focusTimeout","$parcel$interopDefault","addEventListener","event","preventDefault","dispatchCreateEvent","toggleInput","requestSubmit","appendTo","show","document","composedPath","includes","hide","then","CREATE","detail","title","done","dispatchEvent","setAttribute","setTimeout","$e7d271b4c4f047cc$export$41a0eeb6f818a938","check","menu","btnMenu","btnDelete","isMenuOpen","isSaved","prevTitleValue","_id","innerText","remove","cPrefix","toggleMenu","dispatchUpdateEvent","handleDocumentClick","bind","handleEvent","target","dispatchDeleteEvent","disabled","focus","toggle","$905801f59054bab1$export$1637e515a5a47691","items","addItem","item","push","updateItem","props","find","$c0e5aa45fd271307$export$9f7771068413722","header","list","createItem","UPDATE","prevProps","DELETE","deleteItem","getAllItems","enable","addListItems","catch","error","console","$75953815c10d3553$export$86fbec116b87613f","instance","run"],"version":3,"file":"index.74d4eaaa.js.map"}